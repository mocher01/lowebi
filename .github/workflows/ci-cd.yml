name: Logen v2 CI/CD Pipeline

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies (Backend)
        run: |
          cd v2/backend
          npm ci

      - name: Install dependencies (Frontend)
        run: |
          cd v2/frontend
          npm ci

      - name: Run Security Audit (Backend)
        run: |
          cd v2/backend
          npm audit --audit-level moderate

      - name: Run Security Audit (Frontend)
        run: |
          cd v2/frontend
          npm audit --audit-level moderate

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Backend Testing
  backend-tests:
    name: Backend Tests
    needs: security-scan
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: logen_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: v2/backend/package-lock.json

      - name: Install dependencies
        run: |
          cd v2/backend
          npm ci

      - name: Run ESLint
        run: |
          cd v2/backend
          npm run lint

      - name: Run TypeScript check
        run: |
          cd v2/backend
          npm run build

      - name: Run unit tests
        run: |
          cd v2/backend
          npm run test:unit
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/logen_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: |
          cd v2/backend
          npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/logen_test
          REDIS_URL: redis://localhost:6379

      - name: Generate coverage report
        run: |
          cd v2/backend
          npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/logen_test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: v2/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage threshold check
        run: |
          cd v2/backend
          npm run test:coverage:check

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    needs: security-scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: v2/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd v2/frontend
          npm ci

      - name: Run ESLint
        run: |
          cd v2/frontend
          npm run lint

      - name: Run TypeScript check
        run: |
          cd v2/frontend
          npm run type-check

      - name: Run unit tests
        run: |
          cd v2/frontend
          npm run test:unit

      - name: Run component tests
        run: |
          cd v2/frontend
          npm run test:components

      - name: Build application
        run: |
          cd v2/frontend
          npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: v2/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  # E2E Testing
  e2e-tests:
    name: E2E Tests
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd v2/backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start services for E2E tests
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run database migrations
        run: |
          cd v2/backend
          npm run typeorm:migration:run
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/logen_test

      - name: Run E2E tests
        run: |
          cd tests
          npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Performance Testing
  performance-tests:
    name: Performance Tests
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 60  # Extended wait for performance testing

      - name: Run load tests
        run: |
          cd tests/performance
          artillery run load-test.yml --output load-results.json

      - name: Run stress tests
        run: |
          cd tests/performance
          artillery run stress-test.yml --output stress-results.json

      - name: Generate performance report
        run: |
          cd tests/performance
          artillery report load-results.json --output load-report.html
          artillery report stress-results.json --output stress-report.html

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: tests/performance/*.html

      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  # Build and Container Security
  build-and-scan:
    name: Build & Container Security
    needs: [backend-tests, frontend-tests, e2e-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Extract metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./v2/backend
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./v2/frontend
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta-backend.outputs.tags }}
          format: 'sarif'
          output: 'trivy-backend.sarif'

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta-frontend.outputs.tags }}
          format: 'sarif'
          output: 'trivy-frontend.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend.sarif'

  # Quality Gate
  quality-gate:
    name: Quality Gate
    needs: [backend-tests, frontend-tests, e2e-tests, build-and-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Quality Gate Summary
        run: |
          echo "✅ All quality gates passed successfully!"
          echo "- Security scanning completed"
          echo "- Unit tests passed with coverage >80%"
          echo "- Integration tests passed"
          echo "- E2E tests passed"
          echo "- Container security scan passed"

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: quality-gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add actual staging deployment logic here
          
      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke test logic here
          
      - name: Notify deployment success
        run: |
          echo "✅ Staging deployment completed successfully!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: quality-gate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add actual production deployment logic here
          
      - name: Run post-deployment checks
        run: |
          echo "🔍 Running post-deployment health checks..."
          # Add health check logic here
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "🎉 Logen v2 successfully deployed to production!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: "❌ Logen v2 production deployment failed!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
version: '3.8'

networks:
  logen-network:
    driver: bridge
    name: logen-network

volumes:
  logen-postgres-main_data:
    external: true
    name: logen-postgres-main_data
  logen-redis-prod-data:
    name: logen-redis-prod-data

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: logen-postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      PGPORT: 7633
    volumes:
      - logen-postgres-main_data:/var/lib/postgresql/data
    ports:
      - "7633:7633"
    command: postgres -p 7633
    networks:
      - logen-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE} -p 7633"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: logen-redis-prod
    ports:
      - "7679:6379"
    volumes:
      - logen-redis-prod-data:/data
    networks:
      - logen-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NestJS Backend
  backend:
    build:
      context: ../../../apps/backend
      dockerfile: Dockerfile.prod
    image: logen-backend:latest
    container_name: logen-backend
    # Load ALL environment variables from .env files (secure approach)
    # This includes: DB credentials, JWT secrets, OAuth credentials, encryption keys, etc.
    env_file:
      - ../../../apps/backend/.env       # Backend-specific vars (OAuth, etc.)
      - ../../../config/.env              # Shared infrastructure vars (DB, Redis)
    # Override specific values that differ from .env files
    environment:
      - REDIS_HOST=logen-redis-prod       # Use docker service name instead of 'redis'
      - DB_HOST=logen-postgres            # Use docker service name
    volumes:
      - /var/apps/logen:/var/apps/logen
      - /var/apps/nginx-reverse:/var/apps/nginx-reverse  # Required for domain management
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "7600:7610"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - logen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7610/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Admin Frontend
  admin-frontend:
    build:
      context: ../../../apps/admin-frontend
      dockerfile: Dockerfile.prod
    image: logen-admin-frontend:prod
    container_name: logen-admin-frontend-prod
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=7612
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_ENV=${NEXT_PUBLIC_APP_ENV}
    ports:
      - "7602:7612"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - logen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7612"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Customer Frontend
  customer-frontend:
    build:
      context: ../../../apps/frontend
      dockerfile: Dockerfile.prod
    image: logen-customer-frontend:prod
    container_name: logen-customer-frontend-prod
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=7611
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_ENV=${NEXT_PUBLIC_APP_ENV}
    ports:
      - "7601:7611"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - logen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7611"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

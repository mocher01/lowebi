version: '3.8'

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: locod-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-locod_prod}
      POSTGRES_USER: ${POSTGRES_USER:-locod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}
    ports:
      - "7633:5432"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-prod.conf:/etc/postgresql/postgresql.conf
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - locod-production
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-locod_user} -d ${POSTGRES_DB:-locod_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Session & Queue Management - Production
  redis:
    image: redis:7-alpine
    container_name: locod-redis-prod
    ports:
      - "7679:6379"
    volumes:
      - redis_prod_data:/data
      - ./redis-prod.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - locod-production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend - Production
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: locod-backend-prod
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${POSTGRES_USER:-locod_user}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB:-locod_prod}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      PORT: 7600
      HTTPS_ENABLED: "true"
      APP_VERSION: 2.0.0
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "7600:7610"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - locod-production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7610/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: locod-prometheus
    ports:
      - "7691:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - locod-production
    restart: unless-stopped

  # Monitoring Stack - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: locod-grafana
    ports:
      - "7690:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - locod-production
    restart: unless-stopped

networks:
  locod-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_data:
  grafana_data:
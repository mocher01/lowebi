const { test, expect } = require('@playwright/test');

test('User flow: Accueil ‚Üí Footer ‚Üí Interpr√©tariat', async ({ page }) => {
  console.log('üéØ Testing user flow: Accueil ‚Üí Footer ‚Üí Interpr√©tariat');
  
  // 1. Aller sur page d'accueil
  await page.goto('http://162.55.213.90:3003/');
  console.log('‚úÖ Page accueil charg√©e');
  
  // 2. Scroller vers le footer
  await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
  await page.waitForTimeout(2000);
  console.log('‚úÖ Scroll√© vers le footer');
  
  // 3. Lister tous les liens du footer pour d√©bugger
  const footerButtons = await page.locator('footer button').allTextContents();
  console.log('üìã Boutons footer:', footerButtons);
  
  // 4. Chercher le bouton Interpr√©tariat dans le footer
  const interpretariatButton = page.locator('footer button:has-text("Interpr√©tariat")');
  
  if (await interpretariatButton.isVisible()) {
    console.log('‚úÖ Bouton Interpr√©tariat trouv√© dans footer');
    
    // V√©rifier l'URL avant clic
    const urlBefore = page.url();
    console.log('üìç URL avant clic:', urlBefore);
    
    // Cliquer sur le bouton Interpr√©tariat
    await interpretariatButton.click();
    
    await page.waitForLoadState('networkidle');
    const currentUrl = page.url();
    console.log('üìç URL apr√®s clic:', currentUrl);
    
    // V√©rifier que l'URL contient /service/interpretation
    expect(currentUrl).toContain('/service/interpretation');
    console.log('‚úÖ Navigation vers page service d√©taill√©e r√©ussie');
    
    // V√©rifier que la page a scroll√© vers le haut
    const scrollPosition = await page.evaluate(() => window.pageYOffset);
    console.log('üìç Position scroll apr√®s navigation:', scrollPosition);
    expect(scrollPosition).toBeLessThan(100); // Doit √™tre proche du haut
    
    // V√©rifier le contenu de la page
    const pageTitle = await page.locator('h1, h2').first().textContent();
    console.log('üìÑ Titre de la page service:', pageTitle);
    
    // V√©rifier les fonctionnalit√©s sp√©cifiques √† Interpr√©tariat
    const pageContent = await page.textContent('body');
    const hasInterpreterContent = pageContent.includes('Interpr√©tariat') || 
                                pageContent.includes('cons√©cutif') ||
                                pageContent.includes('n√©gociations');
    console.log('‚úÖ Contenu Interpr√©tariat pr√©sent:', hasInterpreterContent);
    expect(hasInterpreterContent).toBeTruthy();
    
  } else {
    // Fallback: chercher dans les services de la page d'accueil
    await page.goto('http://162.55.213.90:3003/');
    const interpretariatCard = page.locator('text=Interpr√©tariat').first();
    
    if (await interpretariatCard.isVisible()) {
      console.log('‚úÖ Service Interpr√©tariat trouv√© sur page accueil');
      await interpretariatCard.click();
      
      await page.waitForLoadState('networkidle');
      const currentUrl = page.url();
      console.log('üìç URL apr√®s clic:', currentUrl);
      
      expect(currentUrl).toContain('/service/interpretation');
      console.log('‚úÖ Navigation vers page service d√©taill√©e r√©ussie');
    } else {
      console.log('‚ùå Service Interpr√©tariat non trouv√©');
      throw new Error('Service Interpr√©tariat non trouv√© ni dans footer ni sur page accueil');
    }
  }
});
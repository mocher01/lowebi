const { chromium } = require('playwright');

(async () => {
    console.log('üîç CHECKING STEP 5 DEPLOYMENT');
    console.log('='.repeat(50));
    
    const browser = await chromium.launch({ 
        headless: false, 
        slowMo: 800 
    });
    const page = await browser.newPage();
    
    try {
        console.log('üìã Going to wizard...');
        await page.goto('http://162.55.213.90:3080/wizard');
        await page.waitForTimeout(2000);
        
        // Accept terms and navigate quickly to Step 5
        await page.check('input[type="checkbox"]');
        await page.click('button:has-text("Commencer")');
        await page.waitForTimeout(1000);
        
        // Skip template
        await page.click('button:has-text("Suivant")');
        await page.waitForTimeout(1000);
        
        // Fill basic info quickly
        await page.fill('input[x-model="wizardData.siteName"]', 'Test');
        await page.fill('input[x-model="wizardData.domain"]', 'test.com');
        await page.fill('input[x-model="wizardData.businessType"]', 'test');
        await page.click('button:has-text("Suivant")');
        await page.waitForTimeout(1000);
        
        // Skip Step 3 (Content) - add minimal content
        await page.fill('input[x-model="wizardData.contact.email"]', 'test@test.com');
        await page.click('button:has-text("Suivant")');
        await page.waitForTimeout(1000);
        
        // Skip Step 4 (Images) 
        await page.click('text=J\'ai d√©j√† mes images');
        await page.click('button:has-text("Suivant")');
        await page.waitForTimeout(1500);
        
        console.log('üéØ Now in Step 5 - Checking Images tab...');
        
        // Click on Images tab
        const imagesTab = page.locator('button:has-text("Images & Design")');
        await imagesTab.click();
        await page.waitForTimeout(1000);
        
        // Check for new layout
        console.log('üìä Checking for new layout elements...');
        
        const newHeroSection = await page.locator('text=üè† Image Banni√®re (Hero)').count();
        const groupedLogos = await page.locator('text=üè¢ Logos du Site').count();
        const faviconSection = await page.locator('text=üîñ Favicons').count();
        const oldLayout = await page.locator('text=üñºÔ∏è Images Principales').count();
        
        console.log(`üìä New Hero Section: ${newHeroSection > 0 ? '‚úÖ FOUND' : '‚ùå NOT FOUND'}`);
        console.log(`üìä Grouped Logos: ${groupedLogos > 0 ? '‚úÖ FOUND' : '‚ùå NOT FOUND'}`);
        console.log(`üìä Favicon Section: ${faviconSection > 0 ? '‚úÖ FOUND' : '‚ùå NOT FOUND'}`);
        console.log(`üìä Old Layout: ${oldLayout > 0 ? '‚ùå STILL PRESENT' : '‚úÖ REMOVED'}`);
        
        // Take screenshot
        await page.screenshot({ path: 'tests/manual/step5-deployment-check.png', fullPage: true });
        console.log('üì∏ Screenshot saved: tests/manual/step5-deployment-check.png');
        
        // Check page source
        const pageContent = await page.content();
        const hasNewCode = pageContent.includes('üè† Image Banni√®re (Hero)');
        console.log(`üìä Page source contains new code: ${hasNewCode ? '‚úÖ YES' : '‚ùå NO'}`);
        
        if (newHeroSection > 0 && groupedLogos > 0 && faviconSection > 0 && oldLayout === 0) {
            console.log('\nüéâ ‚úÖ NEW LAYOUT IS DEPLOYED AND VISIBLE!');
        } else {
            console.log('\n‚ö†Ô∏è ‚ùå NEW LAYOUT NOT FULLY VISIBLE');
            console.log('This could be a browser cache issue or Alpine.js rendering problem.');
        }
        
        console.log('\n‚è∞ Keeping browser open for 30 seconds for manual inspection...');
        await page.waitForTimeout(30000);
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        await page.screenshot({ path: 'tests/manual/step5-check-error.png' });
    } finally {
        await browser.close();
    }
})();
import { test, expect } from '@playwright/test';

// Test complet end-to-end V1 avec g√©n√©ration exhaustive de contenu
test('Cycle14b: Test complet end-to-end V1 syst√®me d\'images', async ({ page, browserName }) => {
  console.log('üöÄ Starting Cycle14b: Test complet V1 syst√®me d\'images end-to-end');

  const timestamp = Date.now();
  const siteName = `Cycle14b_${timestamp}`;

  console.log(`üìù Site name: ${siteName}`);

  // === √âTAPES 1-13: Cr√©ation compl√®te du site ===

  // Step 1: Customer Portal Login
  await page.goto('http://localhost:7611/login');
  await page.waitForLoadState('domcontentloaded');
  await page.waitForTimeout(2000);

  await page.fill('input[type="email"]', 'test@example.com');
  await page.fill('input[type="password"]', 'Administrator2025');
  await page.click('button[type="submit"]');
  await page.waitForTimeout(3000);

  // Check if we're on dashboard page
  const currentUrl = page.url();
  if (!currentUrl.includes('dashboard')) {
    console.log(`Current URL: ${currentUrl}`);
    throw new Error('Login failed - not redirected to dashboard');
  }
  console.log('‚úÖ Step 1: Customer login successful');

  // Step 2: Navigate to My Sites
  await page.click('a[href="/dashboard/my-sites"]');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 2: Navigated to My Sites');

  // Step 3: Create New Site
  await page.click('text=Cr√©er un nouveau site');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 3: Started site creation');

  // Step 4: Complete wizard steps 1-3
  await page.fill('input[placeholder*="nom"]', siteName);
  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');

  await page.click('button:has-text("Restaurant")');
  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');

  // Step 5: Business Info - Complete ALL fields for exhaustive testing
  await page.fill('textarea[placeholder*="description"]', `${siteName} est un restaurant fran√ßais traditionnel offrant une cuisine authentique dans une atmosph√®re chaleureuse. Nous proposons des plats pr√©par√©s avec des ingr√©dients frais et locaux, dans le respect des traditions culinaires fran√ßaises.`);

  // Add multiple services for comprehensive image testing
  const services = [
    'Cuisine Fran√ßaise Traditionnelle',
    'Sp√©cialit√©s R√©gionales',
    'Menu D√©gustation',
    'Service Traiteur',
    'R√©servations Priv√©es'
  ];

  for (let i = 0; i < services.length; i++) {
    if (i > 0) {
      await page.click('button:has-text("Ajouter")');
      await page.waitForTimeout(500);
    }
    await page.fill(`input[placeholder*="service"]:nth-of-type(${i + 1})`, services[i]);
  }

  await page.fill('input[placeholder*="slogan"]', 'Tradition et Saveurs Authentiques');
  await page.fill('input[placeholder*="adresse"]', '123 Rue de la Gastronomie, Paris');
  await page.fill('input[placeholder*="t√©l√©phone"]', '01 23 45 67 89');
  await page.fill('input[placeholder*="email"]', `contact@${siteName.toLowerCase()}.fr`);

  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 5: Completed business info with multiple services');

  // Steps 6-13: Complete remaining wizard steps to generate full content
  const steps = [
    { step: 6, action: async () => {
      await page.click('button:has-text("Moderne")');
      await page.click('button:has-text("Continuer")');
    }},
    { step: 7, action: async () => {
      await page.click('button:has-text("#FF6B6B")');
      await page.click('button:has-text("Continuer")');
    }},
    { step: 8, action: async () => {
      await page.click('button:has-text("Oui")');
      await page.click('button:has-text("Continuer")');
    }},
    { step: 9, action: async () => {
      await page.click('button:has-text("Oui")');
      await page.click('button:has-text("Continuer")');
    }},
    { step: 10, action: async () => {
      await page.click('button:has-text("G√©n√©rer le contenu par IA")');
      await page.waitForLoadState('networkidle');
    }},
  ];

  for (const { step, action } of steps) {
    await action();
    await page.waitForLoadState('networkidle');
    console.log(`‚úÖ Step ${step}: Completed`);
  }

  // Step 11: Wait for AI content generation to complete
  await page.waitForSelector('button:has-text("Continuer")', { timeout: 60000 });
  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 11: AI content generation completed');

  // Step 12: Review and continue
  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 12: Content review completed');

  // Step 13: Navigate to Images step
  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 13: Reached Images step');

  // === √âTAPE 14: TEST V1 IMAGES ===

  // Select "G√©n√©rer mes images par IA"
  await page.click('button:has-text("G√©n√©rer mes images par IA")');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 14: Selected AI image generation');

  // Submit image request
  await page.click('button:has-text("Continuer")');
  await page.waitForLoadState('networkidle');
  console.log('‚úÖ Step 14: Image request submitted');

  // === V√âRIFICATION ADMIN V1 ===

  // Open new tab for admin
  const adminPage = await page.context().newPage();
  await adminPage.goto('http://localhost:7612/login');

  await adminPage.fill('input[name="email"]', 'admin@locod.ai');
  await adminPage.fill('input[name="password"]', 'admin123');
  await adminPage.click('button[type="submit"]');
  await adminPage.waitForURL('**/dashboard');
  console.log('‚úÖ Admin: Login successful');

  // Navigate to AI Queue
  await adminPage.click('a[href="/dashboard/ai-queue"]');
  await adminPage.waitForLoadState('networkidle');
  console.log('‚úÖ Admin: Navigated to AI Queue');

  // Find our specific image request
  const ourRequest = await adminPage.locator('tr').filter({ hasText: siteName }).first();

  if (await ourRequest.count() === 0) {
    console.log(`‚ùå Image request for ${siteName} not found in queue`);
    throw new Error(`Image request for ${siteName} not found`);
  }

  console.log(`‚úÖ Found image request for ${siteName}`);

  // Open the request modal
  await ourRequest.locator('button').first().click();
  await adminPage.waitForSelector('[role="dialog"]');
  console.log('‚úÖ Opened image request modal');

  // Get modal content for comprehensive verification
  const modalContent = await adminPage.textContent('[role="dialog"]');

  // Verify V1 French image prompts for ALL image types
  const requiredImageTypes = [
    'Logo Navigation',
    'Logo Footer',
    'Image Hero',
    'Favicon Clair',
    'Favicon Sombre',
    'Image Service',
    'Image Blog',
    'Image √Ä Propos',
    'Image Contact'
  ];

  let foundImageTypes = 0;
  const missingTypes = [];

  for (const imageType of requiredImageTypes) {
    if (modalContent.includes(imageType)) {
      foundImageTypes++;
      console.log(`‚úÖ Found: ${imageType}`);
    } else {
      missingTypes.push(imageType);
    }
  }

  // Verify we found at least 8 of 9 image types (services are dynamic)
  if (foundImageTypes < 8) {
    console.log(`‚ùå Only found ${foundImageTypes}/9 image types`);
    console.log('Missing types:', missingTypes);
    console.log('Modal content preview:', modalContent.substring(0, 500));
    throw new Error(`Insufficient V1 image types found: ${foundImageTypes}/9`);
  }

  console.log(`‚úÖ V1 Image Types: ${foundImageTypes}/9 found`);

  // Verify French prompts (should contain French restaurant descriptions)
  const hasFrenchContent = modalContent.includes('restaurant') ||
                          modalContent.includes('cuisine') ||
                          modalContent.includes('fran√ßais') ||
                          modalContent.includes('gastronomique') ||
                          modalContent.includes('authentique');

  if (!hasFrenchContent) {
    console.log('‚ùå No French restaurant content detected in prompts');
    console.log('Modal content preview:', modalContent.substring(0, 500));
    throw new Error('French V1 prompts not detected');
  }

  console.log('‚úÖ French V1 prompts verified');

  // Verify this is NOT a content request (should not have content generation fields)
  const isNotContentRequest = !modalContent.includes('‚ö†Ô∏è Important: G√©n√©rez les images selon les prompts');

  if (!isNotContentRequest) {
    console.log('‚ùå Still showing content generation instructions instead of V1 image interface');
    throw new Error('V1 image interface not properly implemented');
  }

  console.log('‚úÖ Proper V1 image interface confirmed (not content generation)');

  // Verify dynamic service integration
  const hasServiceIntegration = modalContent.includes('Cuisine Fran√ßaise') ||
                               modalContent.includes('Sp√©cialit√©s R√©gionales');

  if (hasServiceIntegration) {
    console.log('‚úÖ Dynamic service integration detected');
  } else {
    console.log('‚ö†Ô∏è Service integration not clearly visible in prompts');
  }

  await adminPage.close();

  console.log('üéâ CYCLE14B COMPLET: V1 syst√®me d\'images fonctionne parfaitement!');
  console.log(`üìä R√©sultats:`);
  console.log(`   - Types d'images d√©tect√©s: ${foundImageTypes}/9`);
  console.log(`   - Prompts fran√ßais: ‚úÖ`);
  console.log(`   - Interface V1: ‚úÖ`);
  console.log(`   - Int√©gration dynamique: ‚úÖ`);
});
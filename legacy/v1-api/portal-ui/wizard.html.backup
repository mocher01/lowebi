<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Locod.AI - Assistant de Création de Site</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
    <style>
        [x-cloak] { display: none !important; }
        .step-active { @apply bg-blue-600 text-white; }
        .step-completed { @apply bg-green-600 text-white; }
        .step-pending { @apply bg-gray-300 text-gray-700; }
        .wizard-step { transition: all 0.3s ease-in-out; }
        .fade-enter { opacity: 0; transform: translateX(20px); }
        .fade-enter-active { opacity: 1; transform: translateX(0); }
        .template-card { transition: all 0.2s ease-in-out; }
        .template-card:hover { transform: translateY(-2px); }
        .upload-area {
            border: 2px dashed #d1d5db;
            transition: all 0.2s ease-in-out;
        }
        .upload-area:hover { border-color: #3b82f6; background-color: #f8fafc; }
        .upload-area.dragover { border-color: #3b82f6; background-color: #eff6ff; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div x-data="enhancedWizardApp()" x-cloak class="min-h-screen">
        <!-- Navigation -->
        <nav class="bg-white shadow-sm border-b">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                    <div class="flex items-center">
                        <h1 class="text-xl font-bold text-gray-900">Assistant de Création de Site Locod.AI</h1>
                    </div>
                    <div class="flex items-center space-x-4">
                        <!-- Language Selector -->
                        <select x-model="language" @change="updateLanguage()" 
                                class="text-sm border border-gray-300 rounded px-2 py-1">
                            <option value="fr">Français</option>
                            <option value="en">English</option>
                        </select>
                        <span class="text-sm text-gray-500">v1.1.1.9.2.4.2.5</span>
                        <button @click="showHelp = !showHelp" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Help Modal -->
        <div x-show="showHelp" x-transition class="fixed inset-0 z-50 overflow-y-auto">
            <div class="flex items-center justify-center min-h-screen px-4">
                <div class="fixed inset-0 bg-black opacity-50" @click="showHelp = false"></div>
                <div class="bg-white rounded-lg max-w-md mx-auto z-50 p-6">
                    <h2 class="text-lg font-bold mb-4" x-text="text.help.title"></h2>
                    <div class="space-y-2 text-sm text-gray-600">
                        <p x-text="text.help.navigation"></p>
                        <p x-text="text.help.autosave"></p>
                        <p x-text="text.help.optional"></p>
                        <p x-text="text.help.review"></p>
                    </div>
                    <button @click="showHelp = false" 
                            class="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700" 
                            x-text="text.common.close">
                    </button>
                </div>
            </div>
        </div>

        <!-- Template Preview Modal -->
        <div x-show="showTemplatePreview" x-transition class="fixed inset-0 z-50 overflow-y-auto">
            <div class="flex items-center justify-center min-h-screen px-4">
                <div class="fixed inset-0 bg-black opacity-50" @click="showTemplatePreview = null"></div>
                <div class="bg-white rounded-lg max-w-lg mx-auto z-50 p-6">
                    <template x-if="showTemplatePreview">
                        <div>
                            <h2 class="text-xl font-bold mb-4">Aperçu du Template</h2>
                            <div class="mb-6">
                                <!-- Template Preview Content -->
                                <div class="bg-gray-100 rounded-lg p-6 mb-4">
                                    <h3 class="text-lg font-semibold mb-2" x-text="showTemplatePreview.displayName || showTemplatePreview.name"></h3>
                                    <p class="text-gray-600 mb-4" x-text="showTemplatePreview.description"></p>
                                    
                                    <div class="space-y-3 text-sm">
                                        <div><strong>Version:</strong> <span x-text="showTemplatePreview.version || '1.0.0'"></span></div>
                                        <div><strong>Architecture:</strong> React moderne avec Tailwind CSS</div>
                                        <div><strong>Fonctionnalités disponibles:</strong></div>
                                        <ul class="list-disc list-inside ml-4 text-gray-600 space-y-1">
                                            <li><span class="text-green-600">✓</span> Architecture React moderne et performante</li>
                                            <li><span class="text-green-600">✓</span> Design responsive (mobile, tablet, desktop)</li>
                                            <li><span class="text-blue-600">✓</span> Workflows automatisés avec N8N</li>
                                            <li><span class="text-green-600">✓</span> Blog intégré avec gestion de contenu</li>
                                            <li><span class="text-orange-600">○</span> E-boutique (en développement)</li>
                                            <li><span class="text-green-600">✓</span> Formulaires de contact avancés</li>
                                            <li><span class="text-green-600">✓</span> Navigation adaptative</li>
                                            <li><span class="text-green-600">✓</span> Optimisé pour le SEO</li>
                                            <li><span class="text-green-600">✓</span> Système de thèmes personnalisables</li>
                                        </ul>
                                        
                                        <div class="mt-4 p-3 bg-blue-50 rounded-lg">
                                            <p class="text-blue-800 text-sm">
                                                <strong>Note:</strong> Les couleurs, contenus et logos seront personnalisés dans les prochaines étapes selon vos préférences.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="flex justify-between">
                                <button @click="showTemplatePreview = null" 
                                        class="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors">
                                    Fermer
                                </button>
                                <button @click="selectTemplate(showTemplatePreview.name); showTemplatePreview = null" 
                                        class="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700 transition-colors">
                                    Utiliser ce template
                                </button>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
        </div>

        <!-- Enhanced Progress Bar -->
        <div class="max-w-5xl mx-auto px-4 py-8">
            <!-- Step Counter -->
            <div class="text-center mb-6">
                <span class="text-lg font-semibold text-gray-700">Étape <span x-text="currentStep + 1"></span> sur 8</span>
            </div>
            
            <!-- Visual Progress Bar -->
            <div class="mb-8">
                <div class="w-full bg-gray-200 rounded-full h-2 mb-6">
                    <div class="bg-blue-600 h-2 rounded-full transition-all duration-500 ease-out" 
                         :style="`width: ${((currentStep + 1) / 8) * 100}%`"></div>
                </div>
                
                <!-- Step Circles -->
                <div class="flex justify-between items-center relative">
                    <template x-for="(step, index) in steps" :key="index">
                        <div class="flex flex-col items-center relative z-10">
                            <!-- Circle -->
                            <div :class="[
                                'w-12 h-12 rounded-full flex items-center justify-center text-sm font-bold transition-all duration-300 border-2',
                                index < currentStep ? 'bg-green-600 text-white border-green-600' : 
                                index === currentStep ? 'bg-blue-600 text-white border-blue-600' : 'bg-white text-gray-400 border-gray-300'
                            ]">
                                <!-- Checkmark for completed steps -->
                                <svg x-show="index < currentStep" class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                </svg>
                                <!-- Step number -->
                                <span x-show="index >= currentStep" x-text="index + 1"></span>
                            </div>
                            
                            <!-- Step Label -->
                            <div class="mt-3 text-center max-w-20">
                                <span :class="[
                                    'text-xs font-medium',
                                    index <= currentStep ? 'text-gray-900' : 'text-gray-500'
                                ]" x-text="step.title"></span>
                            </div>
                        </div>
                    </template>
                    
                    <!-- Connector Line -->
                    <div class="absolute top-6 left-6 right-6 h-0.5 bg-gray-300 -z-0">
                        <div class="h-full bg-green-600 transition-all duration-500 ease-out" 
                             :style="`width: ${(currentStep / 7) * 100}%`"></div>
                    </div>
                </div>
            </div>

            <!-- Step Content Container -->
            <div class="bg-white rounded-lg shadow-sm min-h-96">
                
                <!-- Step 0: Welcome & Language -->
                <div x-show="currentStep === 0" x-transition class="wizard-step p-8">
                    <div class="text-center max-w-2xl mx-auto">
                        <h2 class="text-3xl font-bold text-gray-900 mb-4" x-text="text.welcome.title"></h2>
                        <p class="text-lg text-gray-600 mb-8" x-text="text.welcome.subtitle"></p>
                        
                        <!-- Site Language Selection -->
                        <div class="mb-8">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Langue de votre site web</label>
                            <select x-model="wizardData.siteLanguage" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <option value="fr">Français</option>
                                <option value="en">English</option>
                                <option value="es">Español</option>
                                <option value="de">Deutsch</option>
                            </select>
                        </div>

                        <!-- Terms and Conditions -->
                        <div class="text-left bg-gray-50 p-6 rounded-lg mb-6">
                            <h3 class="font-semibold mb-2" x-text="text.welcome.terms.title"></h3>
                            <ul class="text-sm text-gray-600 space-y-1">
                                <li x-text="text.welcome.terms.item1"></li>
                                <li x-text="text.welcome.terms.item2"></li>
                                <li x-text="text.welcome.terms.item3"></li>
                            </ul>
                            <label class="flex items-center mt-4">
                                <input type="checkbox" x-model="wizardData.termsAccepted" class="mr-2">
                                <span class="text-sm" x-text="text.welcome.terms.accept"></span>
                            </label>
                        </div>

                        <button @click="nextStep()" 
                                :disabled="!wizardData.termsAccepted"
                                :class="[
                                    'px-8 py-3 rounded-lg font-medium transition-colors',
                                    wizardData.termsAccepted 
                                        ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                        : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                ]"
                                x-text="text.common.start">
                        </button>
                    </div>
                </div>

                <!-- Step 1: Template Selection -->
                <div x-show="currentStep === 1" x-transition class="wizard-step p-8">
                    <h2 class="text-2xl font-bold mb-6">Sélection de Modèle</h2>
                    <p class="text-gray-600 mb-8">Sélectionnez un modèle de base pour votre site</p>

                    <!-- Single Template Display -->
                    <div class="max-w-md mx-auto mb-8">
                        <template x-for="template in availableTemplates" :key="template.name">
                            <div :class="[
                                'template-card p-8 border-2 rounded-lg transition-all duration-300 cursor-pointer hover:shadow-lg',
                                wizardData.selectedTemplate === template.name 
                                    ? 'border-blue-600 bg-blue-50 ring-2 ring-blue-200' 
                                    : 'border-gray-200 hover:border-gray-300'
                            ]" @click="selectTemplate(template.name)">
                                <div class="text-center">
                                    <!-- Template Icon -->
                                    <div class="w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                                        <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z"></path>
                                        </svg>
                                    </div>
                                    
                                    <!-- Template Info -->
                                    <h3 class="text-xl font-bold text-gray-900 mb-2" x-text="template.displayName || template.name"></h3>
                                    <p class="text-gray-600 mb-4" x-text="template.description"></p>
                                    
                                    <!-- Selected Badge -->
                                    <div x-show="wizardData.selectedTemplate === template.name" class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800 mb-4">
                                        <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                                        </svg>
                                        Sélectionné
                                    </div>
                                    
                                    <!-- Preview Button -->
                                    <button @click.stop="showTemplatePreview = {
                                        name: template.name,
                                        displayName: template.displayName || 'Template Basic',
                                        description: template.description,
                                        version: template.version || '1.0.0'
                                    }" 
                                            class="bg-white text-blue-600 border border-blue-600 px-4 py-2 rounded hover:bg-blue-50 transition-colors">
                                        Aperçu
                                    </button>
                                </div>
                            </div>
                        </template>
                        
                        <!-- No Templates Fallback -->
                        <div x-show="availableTemplates.length === 0" class="text-center py-12">
                            <div class="w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-lg flex items-center justify-center">
                                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                            </div>
                            <p class="text-gray-500">Aucun modèle disponible</p>
                        </div>
                    </div>

                    <!-- Template Architecture Info -->
                    <div x-show="wizardData.selectedTemplate && wizardData.selectedTemplate !== 'custom'" 
                         class="bg-gray-50 p-6 rounded-lg mb-6">
                        <h3 class="font-semibold mb-4">Architecture du Template</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <h4 class="text-sm font-medium text-gray-700 mb-2">Technologies incluses</h4>
                                <div class="space-y-2 text-sm text-gray-600">
                                    <div class="flex items-center">
                                        <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                                        <span>React 18 + Vite</span>
                                    </div>
                                    <div class="flex items-center">
                                        <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                                        <span>Tailwind CSS</span>
                                    </div>
                                    <div class="flex items-center">
                                        <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                                        <span>Responsive Design</span>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <h4 class="text-sm font-medium text-gray-700 mb-2">Fonctionnalités disponibles</h4>
                                <div class="space-y-2 text-sm text-gray-600">
                                    <div class="flex items-center">
                                        <div class="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
                                        <span>Workflows automatisés (N8N)</span>
                                    </div>
                                    <div class="flex items-center">
                                        <div class="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                                        <span>Blog intégré</span>
                                    </div>
                                    <div class="flex items-center">
                                        <div class="w-2 h-2 bg-orange-500 rounded-full mr-2"></div>
                                        <span>E-boutique (à venir)</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 p-3 bg-blue-50 rounded-lg">
                            <p class="text-blue-800 text-sm">
                                <strong>Note:</strong> Les couleurs, logos et contenus seront personnalisés dans les prochaines étapes.
                            </p>
                        </div>
                    </div>

                    <div class="flex justify-between">
                        <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50" x-text="text.common.previous"></button>
                        <button @click="nextStep()" 
                                :disabled="!wizardData.selectedTemplate"
                                :class="[
                                    'px-6 py-2 rounded-lg font-medium transition-colors',
                                    wizardData.selectedTemplate 
                                        ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                        : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                ]"
                                x-text="text.common.next">
                        </button>
                    </div>
                </div>

                <!-- Step 2: Business Information -->
                <div x-show="currentStep === 2" x-transition class="wizard-step p-8">
                    <h2 class="text-2xl font-bold mb-6">Informations sur votre Entreprise</h2>
                    <p class="text-gray-600 mb-8">Parlez-nous de votre entreprise pour personnaliser votre site</p>
                    
                    <div class="space-y-6">
                        <!-- Site Name -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Nom de votre site/entreprise *
                            </label>
                            <input type="text" 
                                   x-model="wizardData.siteName" 
                                   @input="validateSiteName()"
                                   class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   :class="errors.siteName ? 'border-red-500' : 'border-gray-300'"
                                   placeholder="Mon Entreprise"
                                   maxlength="50">
                            <div x-show="errors.siteName" class="text-red-500 text-sm mt-1" x-text="errors.siteName"></div>
                        </div>

                        <!-- Business Type (Free Input with Suggestions) -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Type d'activité *
                            </label>
                            <div class="relative">
                                <input type="text" 
                                       x-model="wizardData.businessType" 
                                       @input="handleBusinessTypeInput($event)"
                                       @focus="showBusinessTypeSuggestions = true"
                                       class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                       :class="errors.businessType ? 'border-red-500' : 'border-gray-300'"
                                       placeholder="Ex: Traduction, Éducation, Plomberie, Restaurant..."
                                       maxlength="50">
                                       
                                <!-- Suggestions Dropdown -->
                                <div x-show="showBusinessTypeSuggestions && filteredBusinessTypes.length > 0" 
                                     class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
                                    <template x-for="suggestion in filteredBusinessTypes" :key="suggestion.key">
                                        <div @click="selectBusinessTypeSuggestion(suggestion.key, suggestion.name)" 
                                             class="px-3 py-2 hover:bg-blue-50 cursor-pointer border-b border-gray-100 last:border-b-0">
                                            <div class="font-medium text-gray-900" x-text="suggestion.name"></div>
                                            <div class="text-sm text-gray-600" x-text="suggestion.description"></div>
                                        </div>
                                    </template>
                                </div>
                            </div>
                            <div x-show="errors.businessType" class="text-red-500 text-sm mt-1" x-text="errors.businessType"></div>
                            <p class="text-sm text-gray-500 mt-1">Tapez librement ou choisissez une suggestion</p>
                        </div>

                        <!-- Business Description -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Description de votre entreprise
                            </label>
                            <textarea x-model="wizardData.businessDescription" 
                                      rows="3"
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                      placeholder="Décrivez votre entreprise et vos services en quelques mots"
                                      maxlength="200"></textarea>
                            <div class="text-sm text-gray-400 mt-1" x-text="(wizardData.businessDescription || '').length + '/200 caractères'"></div>
                        </div>

                        <!-- Domain -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Nom de domaine souhaité
                            </label>
                            <input type="text" 
                                   x-model="wizardData.domain" 
                                   @input="validateDomain()"
                                   class="w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   :class="errors.domain ? 'border-red-500' : 'border-gray-300'"
                                   placeholder="mon-entreprise.com">
                            <div x-show="errors.domain" class="text-red-500 text-sm mt-1" x-text="errors.domain"></div>
                            <p class="text-sm text-gray-500 mt-1">Optionnel - Format: domain.com (sans http://)</p>
                        </div>

                        <!-- Slogan -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Slogan/Phrase d'accroche
                            </label>
                            <input type="text" 
                                   x-model="wizardData.slogan" 
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                   placeholder="Phrase accrocheuse pour votre site"
                                   maxlength="100">
                            <div class="text-sm text-gray-400 mt-1" x-text="(wizardData.slogan || '').length + '/100 caractères'"></div>
                        </div>

                        <!-- Generated Site ID Preview -->
                        <div x-show="wizardData.siteName" class="bg-gray-50 p-4 rounded-lg">
                            <h3 class="font-semibold text-gray-700 mb-2">Aperçu de l'identifiant du site</h3>
                            <p class="text-sm text-gray-600 mb-2">Identifiant généré automatiquement :</p>
                            <code class="bg-white px-2 py-1 rounded text-blue-600 text-sm" x-text="generateSiteId(wizardData.siteName)"></code>
                        </div>
                    </div>

                    <div class="flex justify-between mt-8">
                        <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
                            Précédent
                        </button>
                        <button @click="nextStep()" 
                                :disabled="!canProceedFromStep2()"
                                :class="[
                                    'px-6 py-2 rounded-lg font-medium transition-colors',
                                    canProceedFromStep2() 
                                        ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                        : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                ]">
                            Suivant
                        </button>
                    </div>
                </div>

                <!-- Step 3: Content & Activities -->
                <div x-show="currentStep === 3" x-transition class="wizard-step p-8" x-data="{ activeContentTab: 'principal' }">
                    <h2 class="text-2xl font-bold mb-6" x-text="text.content.title"></h2>
                    <p class="text-gray-600 mb-4">Générez le contenu textuel de votre site avec l'aide de notre IA</p>

                    <!-- Content Tabs Navigation -->
                    <div class="border-b border-gray-200 mb-6">
                        <nav class="-mb-px flex space-x-8">
                            <button @click="activeContentTab = 'principal'" 
                                    :class="activeContentTab === 'principal' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                    class="py-2 px-1 border-b-2 font-medium text-sm">
                                🎯 Principal
                            </button>
                            <button @click="activeContentTab = 'services'" 
                                    :class="activeContentTab === 'services' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                    class="py-2 px-1 border-b-2 font-medium text-sm">
                                <span x-text="'📋 ' + (selectedBusinessType?.terminology || 'Services')"></span>
                            </button>
                            <button @click="activeContentTab = 'about'" 
                                    :class="activeContentTab === 'about' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                    class="py-2 px-1 border-b-2 font-medium text-sm">
                                📖 À Propos
                            </button>
                            <button @click="activeContentTab = 'testimonials'" 
                                    :class="activeContentTab === 'testimonials' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                    class="py-2 px-1 border-b-2 font-medium text-sm">
                                💬 Témoignages
                            </button>
                            <button @click="activeContentTab = 'faq'" 
                                    :class="activeContentTab === 'faq' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                    class="py-2 px-1 border-b-2 font-medium text-sm">
                                ❓ FAQ
                            </button>
                            <button @click="activeContentTab = 'contact'" 
                                    :class="activeContentTab === 'contact' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                    class="py-2 px-1 border-b-2 font-medium text-sm">
                                📞 Contact
                            </button>
                        </nav>
                    </div>

                    <!-- AI Generation Button (always visible) -->
                    <div class="flex justify-end mb-6">
                        <button @click="generateCompleteContent()" 
                                :disabled="aiRequest.status === 'processing'"
                                class="bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                            </svg>
                            <span x-show="aiRequest.status !== 'processing'">🧠 Générer tout le contenu par IA</span>
                            <span x-show="aiRequest.status === 'processing'">⏳ Génération en cours...</span>
                        </button>
                    </div>

                    <div class="space-y-6">
                        <!-- Tab: Principal (Hero Content) -->
                        <div x-show="activeContentTab === 'principal'"> 
                                            :disabled="aiRequest.status === 'processing'"
                                            class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm flex items-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                        </svg>
                                        <span x-show="aiRequest.status !== 'processing'">🧠 Générer par IA</span>
                                        <span x-show="aiRequest.status === 'processing'">⏳ Génération en cours...</span>
                                    </button>
                                    <button @click="addActivity()" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-sm" x-text="text.content.activities.add"></button>
                                </div>
                            </div>

                            <!-- AI Request Status -->
                            <div x-show="aiRequest.id" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                                <div class="flex items-center space-x-3">
                                    <div x-show="aiRequest.status === 'processing'" class="flex-shrink-0">
                                        <svg class="animate-spin h-5 w-5 text-blue-600" fill="none" viewBox="0 0 24 24">
                                            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4" class="opacity-25"></circle>
                                            <path fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" class="opacity-75"></path>
                                        </svg>
                                    </div>
                                    <div x-show="aiRequest.status === 'completed'" class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                        </svg>
                                    </div>
                                    <div class="flex-1">
                                        <div x-show="aiRequest.status === 'pending' || aiRequest.status === 'assigned' || aiRequest.status === 'processing'">
                                            <p class="text-sm font-medium">
                                                <span x-show="aiRequest.status === 'pending'">⏳ Demande envoyée - En attente d'un expert...</span>
                                                <span x-show="aiRequest.status === 'assigned'">👨‍💼 Expert assigné - Traitement en cours...</span>
                                                <span x-show="aiRequest.status === 'processing'">🧠 Génération IA en cours...</span>
                                            </p>
                                            <p class="text-xs text-gray-600 mt-1">
                                                ⏱️ Temps écoulé: <span x-text="aiRequest.elapsedTime"></span>
                                                <span class="ml-2">📊 Estimation: 2-5 minutes</span>
                                            </p>
                                        </div>
                                        <div x-show="aiRequest.status === 'completed'" class="text-green-800">
                                            <p class="text-sm font-medium">
                                                ✅ Contenu IA appliqué avec succès!
                                            </p>
                                            <p class="text-xs mt-1">
                                                📝 Vous pouvez maintenant réviser et modifier le contenu ci-dessous avant de continuer.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Generated Content Review (shown when AI content is applied) -->
                            <div x-show="aiRequest.status === 'completed' && aiRequest.generatedContent" class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                                <div class="flex items-center justify-between mb-3">
                                    <h4 class="font-semibold text-green-800">📋 Contenu IA Généré - Révision</h4>
                                    <button @click="showGeneratedPreview = !showGeneratedPreview" 
                                            class="text-green-600 hover:text-green-800 text-sm">
                                        <span x-text="showGeneratedPreview ? 'Masquer' : 'Afficher le détail'"></span>
                                    </button>
                                </div>
                                
                                <div x-show="showGeneratedPreview" x-collapse>
                                    <div class="space-y-3 text-sm">
                                        <!-- Services Preview -->
                                        <div x-show="aiRequest.generatedContent && aiRequest.generatedContent.services">
                                            <h5 class="font-medium text-gray-700">Services/Activités générés:</h5>
                                            <template x-for="(service, index) in aiRequest.generatedContent?.services || []" :key="index">
                                                <div class="bg-white p-2 rounded border-l-4 border-green-400 mb-2">
                                                    <p class="font-medium" x-text="service.name || service.title"></p>
                                                    <p class="text-gray-600 text-xs" x-text="service.description"></p>
                                                </div>
                                            </template>
                                        </div>
                                        
                                        <!-- Hero Content Preview -->
                                        <div x-show="aiRequest.generatedContent && aiRequest.generatedContent.hero">
                                            <h5 class="font-medium text-gray-700">Contenu Hero généré:</h5>
                                            <div class="bg-white p-2 rounded border-l-4 border-blue-400">
                                                <p class="font-medium" x-text="aiRequest.generatedContent?.hero?.title"></p>
                                                <p class="text-gray-600 text-xs" x-text="aiRequest.generatedContent?.hero?.description"></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                <p class="text-xs text-green-700 mt-2">
                                    💡 Le contenu a été appliqué automatiquement aux champs ci-dessous. Vous pouvez l'éditer avant de continuer.
                                </p>
                            </div>

                        </div>

                        <!-- Tab: Services/Activities -->
                        <div x-show="activeContentTab === 'services'">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold" x-text="'Gérer vos ' + (selectedBusinessType?.terminology || 'services')"></h3>
                                <button @click="addActivity()" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 text-sm">
                                    <span x-text="'+ Ajouter ' + (selectedBusinessType?.terminology?.slice(0, -1) || 'service')"></span>
                                </button>
                            </div>
                                <div class="space-y-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">
                                            Titre Principal *
                                        </label>
                                        <input type="text" x-model="wizardData.hero.title" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                               placeholder="Titre accrocheur de votre page d'accueil">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">
                                            Sous-titre
                                        </label>
                                        <input type="text" x-model="wizardData.hero.subtitle" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                               placeholder="Phrase d'accroche sous le titre">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">
                                            Description
                                        </label>
                                        <textarea x-model="wizardData.hero.description" rows="3" 
                                                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                  placeholder="Description détaillée de vos services ou activités"></textarea>
                                    </div>
                                </div>
                            </div>

                            <!-- Activities Form -->
                                <template x-for="(activity, index) in wizardData.activities" :key="activity.id || index">
                                    <div class="border border-gray-200 rounded-lg p-4">
                                        <div class="flex items-start space-x-4">
                                            <div class="flex-1 space-y-3">
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.content.activities.name"></label>
                                                    <input type="text" x-model="activity.name" 
                                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                           :placeholder="text.content.activities.namePlaceholder">
                                                </div>
                                                <div>
                                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.content.activities.description"></label>
                                                    <textarea x-model="activity.description" rows="2" 
                                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                              :placeholder="text.content.activities.descriptionPlaceholder"></textarea>
                                                </div>
                                            </div>
                                            <button @click="removeActivity(index)" 
                                                    x-show="wizardData.activities.length > 1"
                                                    class="text-red-600 hover:text-red-800 p-2">
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </template>
                            </div>
                        </div>

                        <!-- Contact Information -->
                        <div class="border-t pt-6">
                            <h3 class="text-lg font-semibold mb-4" x-text="text.content.contact.title"></h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.content.contact.email"></label>
                                    <input type="email" x-model="wizardData.contact.email" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                           :placeholder="text.content.contact.emailPlaceholder">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.content.contact.phone"></label>
                                    <input type="tel" x-model="wizardData.contact.phone" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                           :placeholder="text.content.contact.phonePlaceholder">
                                </div>
                                <div class="md:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.content.contact.address"></label>
                                    <input type="text" x-model="wizardData.contact.address" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                           :placeholder="text.content.contact.addressPlaceholder">
                                </div>
                            </div>
                        </div>

                        <!-- Navigation -->
                        <div class="flex justify-between mt-8">
                            <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50" x-text="text.common.previous"></button>
                            <button @click="nextStep()" 
                                    :disabled="!wizardData.contact.email || wizardData.activities.some(a => !a.name)"
                                    :class="[
                                        'px-6 py-2 rounded-lg font-medium transition-colors',
                                        wizardData.contact.email && !wizardData.activities.some(a => !a.name)
                                            ? 'bg-blue-600 text-white hover:bg-blue-700' 
                                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                    ]" 
                                    x-text="text.common.next"></button>
                        </div>
                    </div>
                </div>

                <!-- Step 4: Images & Assets -->
                <div x-show="currentStep === 4" x-transition class="wizard-step p-8">
                    <h2 class="text-2xl font-bold mb-6" x-text="text.images.title"></h2>
                    <p class="text-gray-600 mb-8" x-text="text.images.subtitle"></p>

                    <div class="space-y-6">
                        <!-- Image Approach Selection -->
                        <div>
                            <h3 class="text-lg font-semibold mb-4">Choisissez votre approche pour les images</h3>
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                <!-- Manual Upload Option -->
                                <div @click="selectImageApproach('manual')" 
                                     :class="[
                                         'p-6 border-2 rounded-lg cursor-pointer transition-all',
                                         wizardData.imageApproach === 'manual' 
                                             ? 'border-blue-500 bg-blue-50' 
                                             : 'border-gray-200 hover:border-gray-300'
                                     ]">
                                    <div class="text-center">
                                        <svg class="w-12 h-12 mx-auto mb-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                        </svg>
                                        <h4 class="font-semibold mb-2">Upload Manuel</h4>
                                        <p class="text-sm text-gray-600 mb-2">J'uploade toutes mes images</p>
                                        <div class="text-xs text-green-600 font-medium">GRATUIT</div>
                                    </div>
                                </div>

                                <!-- AI Generation Option -->
                                <div @click="selectImageApproach('ai')" 
                                     :class="[
                                         'p-6 border-2 rounded-lg cursor-pointer transition-all',
                                         wizardData.imageApproach === 'ai' 
                                             ? 'border-purple-500 bg-purple-50' 
                                             : 'border-gray-200 hover:border-gray-300'
                                     ]">
                                    <div class="text-center">
                                        <svg class="w-12 h-12 mx-auto mb-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                        </svg>
                                        <h4 class="font-semibold mb-2">Génération IA</h4>
                                        <p class="text-sm text-gray-600 mb-2">L'IA crée toutes mes images</p>
                                        <div class="text-xs text-purple-600 font-medium">~5-10€</div>
                                    </div>
                                </div>

                                <!-- Mixed Option -->
                                <div @click="selectImageApproach('mixed')" 
                                     :class="[
                                         'p-6 border-2 rounded-lg cursor-pointer transition-all',
                                         wizardData.imageApproach === 'mixed' 
                                             ? 'border-orange-500 bg-orange-50' 
                                             : 'border-gray-200 hover:border-gray-300'
                                     ]">
                                    <div class="text-center">
                                        <svg class="w-12 h-12 mx-auto mb-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                                        </svg>
                                        <h4 class="font-semibold mb-2">Approche Mixte</h4>
                                        <p class="text-sm text-gray-600 mb-2">Je choisis pour chaque image</p>
                                        <div class="text-xs text-orange-600 font-medium">Sur mesure</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Content based on selected approach -->
                        <div x-show="wizardData.imageApproach">
                        
                        <!-- Manual Upload Interface -->
                        <div x-show="wizardData.imageApproach === 'manual'">
                            <h3 class="text-lg font-semibold mb-4">Uploadez vos images</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                
                                <!-- Logo Upload -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">
                                        Logo Navbar * (version claire)
                                    </label>
                                    <div @drop="handleFileDrop($event, 'logo')" 
                                         @dragover.prevent 
                                         @dragenter.prevent
                                         class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 cursor-pointer" 
                                         @click="$refs.logoInput.click()">
                                        
                                        <template x-if="!wizardData.images.logo">
                                            <div>
                                                <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                                </svg>
                                                <p class="text-sm text-gray-600">PNG/SVG recommandé (200x200px min)</p>
                                            </div>
                                        </template>
                                        
                                        <template x-if="wizardData.images.logo">
                                            <div>
                                                <img :src="wizardData.images.logo" alt="Logo" class="max-w-full max-h-32 mx-auto mb-2">
                                                <p class="text-sm text-green-600">✓ Logo uploadé</p>
                                                <button @click.stop="removeImage('logo')" class="mt-2 text-red-600 hover:text-red-800 text-sm">Supprimer</button>
                                            </div>
                                        </template>
                                    </div>
                                    <input type="file" x-ref="logoInput" @change="handleFileUpload($event, 'logo')" accept="image/*" class="hidden">
                                </div>

                                <!-- Hero Image Upload -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">
                                        Image Hero * (bannière d'accueil)
                                    </label>
                                    <div @drop="handleFileDrop($event, 'hero')" 
                                         @dragover.prevent 
                                         @dragenter.prevent
                                         class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 cursor-pointer" 
                                         @click="$refs.heroInput.click()">
                                        
                                        <template x-if="!wizardData.images.hero">
                                            <div>
                                                <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                </svg>
                                                <p class="text-sm text-gray-600">JPG/PNG (1200x600px recommandé)</p>
                                            </div>
                                        </template>
                                        
                                        <template x-if="wizardData.images.hero">
                                            <div>
                                                <img :src="wizardData.images.hero" alt="Hero" class="max-w-full max-h-32 mx-auto mb-2">
                                                <p class="text-sm text-green-600">✓ Image hero uploadée</p>
                                                <button @click.stop="removeImage('hero')" class="mt-2 text-red-600 hover:text-red-800 text-sm">Supprimer</button>
                                            </div>
                                        </template>
                                    </div>
                                    <input type="file" x-ref="heroInput" @change="handleFileUpload($event, 'hero')" accept="image/*" class="hidden">
                                </div>

                                <!-- Logo Footer Upload -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">
                                        Logo Footer * (version sombre)
                                    </label>
                                    <div @drop="handleFileDrop($event, 'logoFooter')" 
                                         @dragover.prevent 
                                         @dragenter.prevent
                                         class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 cursor-pointer" 
                                         @click="$refs.logoFooterInput.click()">
                                        
                                        <template x-if="!wizardData.images.logoFooter">
                                            <div>
                                                <svg class="w-12 h-12 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                                </svg>
                                                <p class="text-sm text-gray-600">PNG/SVG (version sombre pour footer)</p>
                                            </div>
                                        </template>
                                        
                                        <template x-if="wizardData.images.logoFooter">
                                            <div>
                                                <img :src="wizardData.images.logoFooter" alt="Logo Footer" class="max-w-full max-h-32 mx-auto mb-2">
                                                <p class="text-sm text-green-600">✓ Logo footer uploadé</p>
                                                <button @click.stop="removeImage('logoFooter')" class="mt-2 text-red-600 hover:text-red-800 text-sm">Supprimer</button>
                                            </div>
                                        </template>
                                    </div>
                                    <input type="file" x-ref="logoFooterInput" @change="handleFileUpload($event, 'logoFooter')" accept="image/*" class="hidden">
                                </div>

                                <!-- Favicons Upload -->
                                <div class="bg-gray-50 p-4 rounded-lg">
                                    <h4 class="font-medium text-gray-900 mb-3">Favicons * (obligatoires)</h4>
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        
                                        <!-- Favicon Light -->
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                                Favicon Clair *
                                            </label>
                                            <div @drop="handleFileDrop($event, 'faviconLight')" 
                                                 @dragover.prevent 
                                                 @dragenter.prevent
                                                 class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer" 
                                                 @click="$refs.faviconLightInput.click()">
                                                
                                                <template x-if="!wizardData.images.faviconLight">
                                                    <div>
                                                        <svg class="w-8 h-8 mx-auto text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                                        </svg>
                                                        <p class="text-xs text-gray-600">PNG 32x32px</p>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="wizardData.images.faviconLight">
                                                    <div>
                                                        <img :src="wizardData.images.faviconLight" alt="Favicon Light" class="max-w-full max-h-16 mx-auto mb-1">
                                                        <p class="text-xs text-green-600">✓ Favicon clair</p>
                                                        <button @click.stop="removeImage('faviconLight')" class="mt-1 text-red-600 hover:text-red-800 text-xs">Supprimer</button>
                                                    </div>
                                                </template>
                                            </div>
                                            <input type="file" x-ref="faviconLightInput" @change="handleFileUpload($event, 'faviconLight')" accept="image/*" class="hidden">
                                        </div>

                                        <!-- Favicon Dark -->
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                                Favicon Sombre *
                                            </label>
                                            <div @drop="handleFileDrop($event, 'faviconDark')" 
                                                 @dragover.prevent 
                                                 @dragenter.prevent
                                                 class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer" 
                                                 @click="$refs.faviconDarkInput.click()">
                                                
                                                <template x-if="!wizardData.images.faviconDark">
                                                    <div>
                                                        <svg class="w-8 h-8 mx-auto text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                                        </svg>
                                                        <p class="text-xs text-gray-600">PNG 32x32px</p>
                                                    </div>
                                                </template>
                                                
                                                <template x-if="wizardData.images.faviconDark">
                                                    <div>
                                                        <img :src="wizardData.images.faviconDark" alt="Favicon Dark" class="max-w-full max-h-16 mx-auto mb-1">
                                                        <p class="text-xs text-green-600">✓ Favicon sombre</p>
                                                        <button @click.stop="removeImage('faviconDark')" class="mt-1 text-red-600 hover:text-red-800 text-xs">Supprimer</button>
                                                    </div>
                                                </template>
                                            </div>
                                            <input type="file" x-ref="faviconDarkInput" @change="handleFileUpload($event, 'faviconDark')" accept="image/*" class="hidden">
                                        </div>
                                    </div>
                                    <p class="text-xs text-gray-600 mt-2">💡 Favicons adaptatifs selon le thème clair/sombre du navigateur</p>
                                </div>

                                <!-- Services Images Note -->
                                <div class="bg-blue-50 p-4 rounded-lg">
                                    <h4 class="font-medium text-blue-900 mb-2">Images de Services</h4>
                                    <p class="text-sm text-blue-800">Les images pour vos services/activités seront configurées dans l'étape suivante selon le nombre d'activités définies.</p>
                                </div>

                            </div>
                        </div>

                        <!-- AI Generation Interface -->
                        <div x-show="wizardData.imageApproach === 'ai'">
                            <div class="bg-gradient-to-r from-purple-50 to-blue-50 p-6 rounded-lg mb-6">
                                <h3 class="text-lg font-semibold mb-4 text-purple-900">Génération automatique par IA</h3>
                                <p class="text-purple-800 mb-4">L'IA créera automatiquement toutes vos images basées sur votre secteur d'activité et description d'entreprise.</p>
                                
                                <!-- Style Selection -->
                                <div class="mb-4">
                                    <label class="block text-sm font-medium text-purple-900 mb-2">Style des images</label>
                                    <select x-model="wizardData.aiStyle" class="w-full px-3 py-2 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500">
                                        <option value="modern">Moderne et épuré</option>
                                        <option value="professional">Professionnel et corporate</option>
                                        <option value="creative">Créatif et artistique</option>
                                        <option value="warm">Chaleureux et accessible</option>
                                    </select>
                                </div>

                                <!-- Cost Estimation -->
                                <div class="bg-white p-4 rounded-lg border border-purple-200">
                                    <h4 class="font-medium mb-2">Estimation du coût</h4>
                                    <div class="space-y-1 text-sm">
                                        <div class="flex justify-between">
                                            <span>Logo Navbar (clair)</span>
                                            <span class="font-medium">1,50€</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span>Logo Footer (sombre)</span>
                                            <span class="font-medium">1,50€</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span>Favicons (clair + sombre)</span>
                                            <span class="font-medium">1,00€</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span>Image Hero</span>
                                            <span class="font-medium">1,50€</span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span>Images Services (estimé: 3)</span>
                                            <span class="font-medium">4,50€</span>
                                        </div>
                                        <div class="border-t border-gray-200 pt-2 flex justify-between font-semibold">
                                            <span>Total estimé</span>
                                            <span class="text-purple-600">~9,50€</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Mixed Approach Interface -->
                        <div x-show="wizardData.imageApproach === 'mixed'">
                            <h3 class="text-lg font-semibold mb-4">Choisissez pour chaque image</h3>
                            <div class="space-y-6">
                                
                                <!-- Logo Choice -->
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-4">
                                        <h4 class="font-medium">Logo Navbar *</h4>
                                        <div class="flex space-x-2">
                                            <button @click="setImageChoice('logo', 'upload')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.logo === 'upload'
                                                            ? 'bg-blue-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                Upload
                                            </button>
                                            <button @click="setImageChoice('logo', 'ai')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.logo === 'ai'
                                                            ? 'bg-purple-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                IA (+2,50€)
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <!-- Upload interface for logo if selected -->
                                    <div x-show="wizardData.imageChoices.logo === 'upload'">
                                        <div @drop="handleFileDrop($event, 'logo')" 
                                             @dragover.prevent 
                                             @dragenter.prevent
                                             class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer" 
                                             @click="$refs.logoMixedInput.click()">
                                            
                                            <template x-if="!wizardData.images.logo">
                                                <p class="text-sm text-gray-600">Cliquez ou glissez votre logo ici</p>
                                            </template>
                                            
                                            <template x-if="wizardData.images.logo">
                                                <div>
                                                    <img :src="wizardData.images.logo" alt="Logo" class="max-w-full max-h-24 mx-auto mb-2">
                                                    <p class="text-sm text-green-600">✓ Logo uploadé</p>
                                                </div>
                                            </template>
                                        </div>
                                        <input type="file" x-ref="logoMixedInput" @change="handleFileUpload($event, 'logo')" accept="image/*" class="hidden">
                                    </div>
                                    
                                    <!-- AI generation info for logo if selected -->
                                    <div x-show="wizardData.imageChoices.logo === 'ai'" class="bg-purple-50 p-3 rounded">
                                        <p class="text-sm text-purple-800">✨ L'IA créera un logo basé sur votre nom d'entreprise et secteur d'activité</p>
                                    </div>
                                </div>

                                <!-- Logo Footer Choice -->
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-4">
                                        <h4 class="font-medium">Logo Footer *</h4>
                                        <div class="flex space-x-2">
                                            <button @click="setImageChoice('logoFooter', 'upload')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.logoFooter === 'upload'
                                                            ? 'bg-blue-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                Upload
                                            </button>
                                            <button @click="setImageChoice('logoFooter', 'ai')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.logoFooter === 'ai'
                                                            ? 'bg-purple-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                IA (+1,50€)
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.logoFooter === 'upload'">
                                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer">
                                            <p class="text-sm text-gray-600">Upload logo footer (version sombre)</p>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.logoFooter === 'ai'" class="bg-purple-50 p-3 rounded">
                                        <p class="text-sm text-purple-800">✨ Version sombre du logo pour footer</p>
                                    </div>
                                </div>

                                <!-- Hero Image Choice -->
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-4">
                                        <h4 class="font-medium">Image Hero *</h4>
                                        <div class="flex space-x-2">
                                            <button @click="setImageChoice('hero', 'upload')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.hero === 'upload'
                                                            ? 'bg-blue-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                Upload
                                            </button>
                                            <button @click="setImageChoice('hero', 'ai')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.hero === 'ai'
                                                            ? 'bg-purple-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                IA (+1,50€)
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.hero === 'upload'">
                                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer">
                                            <p class="text-sm text-gray-600">Upload bannière hero (1200x600px)</p>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.hero === 'ai'" class="bg-purple-50 p-3 rounded">
                                        <p class="text-sm text-purple-800">✨ Bannière générée selon votre activité</p>
                                    </div>
                                </div>

                                <!-- Favicon Light Choice -->
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-4">
                                        <h4 class="font-medium">Favicon Clair *</h4>
                                        <div class="flex space-x-2">
                                            <button @click="setImageChoice('faviconLight', 'upload')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.faviconLight === 'upload'
                                                            ? 'bg-blue-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                Upload
                                            </button>
                                            <button @click="setImageChoice('faviconLight', 'ai')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.faviconLight === 'ai'
                                                            ? 'bg-purple-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                IA (+0,50€)
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.faviconLight === 'upload'">
                                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer">
                                            <p class="text-sm text-gray-600">Upload favicon clair (32x32px)</p>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.faviconLight === 'ai'" class="bg-purple-50 p-3 rounded">
                                        <p class="text-sm text-purple-800">✨ Favicon clair généré depuis votre logo</p>
                                    </div>
                                </div>

                                <!-- Favicon Dark Choice -->
                                <div class="border border-gray-200 rounded-lg p-4">
                                    <div class="flex items-center justify-between mb-4">
                                        <h4 class="font-medium">Favicon Sombre *</h4>
                                        <div class="flex space-x-2">
                                            <button @click="setImageChoice('faviconDark', 'upload')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.faviconDark === 'upload'
                                                            ? 'bg-blue-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                Upload
                                            </button>
                                            <button @click="setImageChoice('faviconDark', 'ai')"
                                                    :class="[
                                                        'px-3 py-1 rounded text-sm',
                                                        wizardData.imageChoices.faviconDark === 'ai'
                                                            ? 'bg-purple-600 text-white'
                                                            : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                                                    ]">
                                                IA (+0,50€)
                                            </button>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.faviconDark === 'upload'">
                                        <div class="border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-gray-400 cursor-pointer">
                                            <p class="text-sm text-gray-600">Upload favicon sombre (32x32px)</p>
                                        </div>
                                    </div>
                                    
                                    <div x-show="wizardData.imageChoices.faviconDark === 'ai'" class="bg-purple-50 p-3 rounded">
                                        <p class="text-sm text-purple-800">✨ Favicon sombre généré depuis votre logo</p>
                                    </div>
                                </div>

                                <!-- Cost Display -->
                                <div class="bg-orange-50 p-4 rounded-lg">
                                    <p class="text-sm text-orange-800">
                                        <strong>Coût total:</strong> <span x-text="calculateMixedCost()"></span>
                                    </p>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Navigation -->
                    <div class="flex justify-between mt-8">
                        <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50" x-text="text.common.previous"></button>
                        <button @click="nextStep()" 
                                class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700" 
                                x-text="text.common.next"></button>
                    </div>
                </div>


                <!-- Step 5: Content Review -->
                <div x-show="currentStep === 5" x-transition class="wizard-step p-8">
                    <h2 class="text-2xl font-bold mb-6" x-text="text.review.title"></h2>
                    <p class="text-gray-600 mb-8" x-text="text.review.subtitle"></p>

                    <div class="space-y-6">
                        <!-- Generated Content Preview -->
                        <div class="bg-gray-50 p-6 rounded-lg">
                            <h3 class="text-lg font-semibold mb-4" x-text="text.review.preview.title"></h3>
                            
                            <!-- Hero Section Preview -->
                            <div class="bg-white p-6 rounded-lg mb-4">
                                <h4 class="text-xl font-bold text-gray-900 mb-2" x-text="generatedContent.hero.title"></h4>
                                <p class="text-lg text-gray-600 mb-4" x-text="generatedContent.hero.subtitle"></p>
                                <p class="text-gray-700" x-text="generatedContent.hero.description"></p>
                            </div>

                            <!-- Activities Preview -->
                            <div class="bg-white p-6 rounded-lg">
                                <h4 class="text-lg font-semibold mb-4" x-text="text.review.preview.activities"></h4>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <template x-for="(activity, index) in wizardData.activities" :key="'review-' + (activity.id || index)">
                                        <div class="border border-gray-200 p-4 rounded-lg">
                                            <h5 class="font-semibold text-gray-900" x-text="activity.name"></h5>
                                            <p class="text-sm text-gray-600 mt-1" x-text="activity.description"></p>
                                        </div>
                                    </template>
                                </div>
                            </div>
                        </div>

                        <!-- Editable Content -->
                        <div>
                            <h3 class="text-lg font-semibold mb-4" x-text="text.review.edit.title"></h3>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.review.edit.heroTitle"></label>
                                    <input type="text" x-model="generatedContent.hero.title" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.review.edit.heroSubtitle"></label>
                                    <input type="text" x-model="generatedContent.hero.subtitle" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.review.edit.heroDescription"></label>
                                    <textarea x-model="generatedContent.hero.description" rows="3" 
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="flex justify-between mt-8">
                        <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50" x-text="text.common.previous"></button>
                        <div class="space-x-3">
                            <button @click="regenerateContent()" class="px-6 py-2 border border-blue-600 text-blue-600 rounded-lg hover:bg-blue-50" x-text="text.review.regenerate"></button>
                            <button @click="nextStep()" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700" x-text="text.common.next"></button>
                        </div>
                    </div>
                </div>

                <!-- Step 6: Advanced Features -->
                <div x-show="currentStep === 6" x-transition class="wizard-step p-8">
                    <h2 class="text-2xl font-bold mb-6" x-text="text.advanced.title"></h2>
                    <p class="text-gray-600 mb-8" x-text="text.advanced.subtitle"></p>

                    <div class="space-y-6">
                        <!-- Blog Setup -->
                        <div class="border border-gray-200 rounded-lg p-6">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-semibold" x-text="text.advanced.blog.title"></h3>
                                <label class="flex items-center">
                                    <input type="checkbox" x-model="wizardData.features.blog" class="mr-2">
                                    <span class="text-sm" x-text="text.advanced.blog.enable"></span>
                                </label>
                            </div>
                            <div x-show="wizardData.features.blog" class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.advanced.blog.categories"></label>
                                    <input type="text" x-model="wizardData.blog.categories" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                           :placeholder="text.advanced.blog.categoriesPlaceholder">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.advanced.blog.initialPosts"></label>
                                    <select x-model="wizardData.blog.initialPosts" 
                                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                                        <option value="0">0</option>
                                        <option value="3">3</option>
                                        <option value="5">5</option>
                                        <option value="10">10</option>
                                    </select>
                                </div>
                            </div>
                        </div>

                        <!-- Newsletter -->
                        <div class="border border-gray-200 rounded-lg p-6">
                            <div class="flex items-center justify-between mb-2">
                                <h3 class="text-lg font-semibold" x-text="text.advanced.newsletter.title"></h3>
                                <label class="flex items-center">
                                    <input type="checkbox" x-model="wizardData.features.newsletter" class="mr-2">
                                    <span class="text-sm" x-text="text.advanced.newsletter.enable"></span>
                                </label>
                            </div>
                            <p class="text-sm text-gray-600" x-text="text.advanced.newsletter.description"></p>
                        </div>

                        <!-- SEO Settings -->
                        <div class="border border-gray-200 rounded-lg p-6">
                            <h3 class="text-lg font-semibold mb-4" x-text="text.advanced.seo.title"></h3>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.advanced.seo.description"></label>
                                    <textarea x-model="wizardData.seo.description" rows="2" 
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                              :placeholder="text.advanced.seo.descriptionPlaceholder"></textarea>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2" x-text="text.advanced.seo.keywords"></label>
                                    <input type="text" x-model="wizardData.seo.keywords" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                           :placeholder="text.advanced.seo.keywordsPlaceholder">
                                </div>
                            </div>
                        </div>

                    </div>

                    <div class="flex justify-between mt-8">
                        <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50" x-text="text.common.previous"></button>
                        <button @click="nextStep()" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700" x-text="text.common.next"></button>
                    </div>
                </div>

                <!-- Step 7: Final Review & Creation -->
                <div x-show="currentStep === 7" x-transition class="wizard-step p-8">
                    <h2 class="text-2xl font-bold mb-6" x-text="text.final.title"></h2>
                    <p class="text-gray-600 mb-8" x-text="text.final.subtitle"></p>

                    <!-- Complete Configuration Summary -->
                    <div class="space-y-6 mb-8">
                        <div class="bg-gray-50 p-6 rounded-lg">
                            <h3 class="font-semibold mb-4" x-text="text.final.summary.title"></h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <h4 class="text-sm font-medium text-gray-700 mb-2" x-text="text.final.summary.basic"></h4>
                                    <ul class="text-sm text-gray-600 space-y-1">
                                        <li><span class="font-medium" x-text="text.business.siteName + ':'"></span> <span x-text="wizardData.siteName"></span></li>
                                        <li><span class="font-medium" x-text="text.business.businessType + ':'"></span> <span x-text="selectedBusinessType?.name"></span></li>
                                        <li><span class="font-medium" x-text="text.business.domain + ':'"></span> <span x-text="wizardData.domain"></span></li>
                                        <li><span class="font-medium" x-text="text.template.title + ':'"></span> <span x-text="wizardData.selectedTemplate"></span></li>
                                    </ul>
                                </div>
                                <div>
                                    <h4 class="text-sm font-medium text-gray-700 mb-2" x-text="text.final.summary.features"></h4>
                                    <ul class="text-sm text-gray-600 space-y-1">
                                        <li x-text="(selectedBusinessType?.terminology || text.content.activities.default) + ': ' + wizardData.activities.length"></li>
                                        <li x-show="wizardData.features.blog" x-text="text.advanced.blog.title + ': ' + text.common.enabled"></li>
                                        <li x-show="wizardData.features.newsletter" x-text="text.advanced.newsletter.title + ': ' + text.common.enabled"></li>
                                        <li x-show="wizardData.logo" x-text="text.branding.logo.title + ': ' + text.common.uploaded"></li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <!-- Template Saving Option -->
                        <div class="border border-gray-200 rounded-lg p-6">
                            <h3 class="font-semibold mb-4" x-text="text.final.template.title"></h3>
                            <label class="flex items-center mb-3">
                                <input type="checkbox" x-model="wizardData.saveAsTemplate" class="mr-2">
                                <span class="text-sm" x-text="text.final.template.save"></span>
                            </label>
                            <div x-show="wizardData.saveAsTemplate" class="space-y-3">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.final.template.name"></label>
                                    <input type="text" x-model="wizardData.templateName" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                           :placeholder="text.final.template.namePlaceholder">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1" x-text="text.final.template.description"></label>
                                    <textarea x-model="wizardData.templateDescription" rows="2" 
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                              :placeholder="text.final.template.descriptionPlaceholder"></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Creation Buttons -->
                    <div class="flex justify-between">
                        <button @click="prevStep()" class="px-6 py-2 border border-gray-300 rounded-lg hover:bg-gray-50" x-text="text.common.previous"></button>
                        <div class="space-x-3">
                            <button @click="createSite(false)" 
                                    :disabled="isCreating"
                                    :class="[
                                        'px-8 py-3 rounded-lg font-medium transition-colors',
                                        isCreating 
                                            ? 'bg-gray-300 text-gray-500 cursor-not-allowed' 
                                            : 'bg-green-600 text-white hover:bg-green-700'
                                    ]"
                                    x-text="isCreating ? text.final.creating : text.final.create">
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Step 8: Creation Result -->
                <div x-show="currentStep === 8" x-transition class="wizard-step p-8">
                    <div class="text-center max-w-2xl mx-auto">
                        <template x-if="creationResult.success">
                            <div>
                                <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
                                    <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                </div>
                                <h2 class="text-3xl font-bold text-gray-900 mb-4" x-text="text.result.success.title"></h2>
                                <p class="text-lg text-gray-600 mb-8" x-text="text.result.success.message"></p>
                                
                                <div class="bg-gray-50 p-6 rounded-lg mb-8">
                                    <h3 class="font-semibold mb-4" x-text="text.result.success.details"></h3>
                                    <div class="text-left space-y-2 text-sm">
                                        <p><span class="font-medium" x-text="text.result.success.siteId + ':'"></span> <span x-text="creationResult.siteId"></span></p>
                                        <p x-show="creationResult.template"><span class="font-medium" x-text="text.result.success.template + ':'"></span> <span x-text="creationResult.template"></span></p>
                                        <p><span class="font-medium" x-text="text.result.success.status + ':'"></span> <span x-text="text.result.success.ready"></span></p>
                                    </div>
                                </div>

                                <div class="space-x-4">
                                    <button @click="viewSite()" class="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 font-medium" x-text="text.result.success.view"></button>
                                    <button @click="openDashboard()" class="border border-gray-300 px-8 py-3 rounded-lg hover:bg-gray-50 font-medium" x-text="text.result.success.dashboard"></button>
                                </div>
                            </div>
                        </template>

                        <template x-if="!creationResult.success">
                            <div>
                                <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
                                    <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                    </svg>
                                </div>
                                <h2 class="text-3xl font-bold text-gray-900 mb-4" x-text="text.result.error.title"></h2>
                                <p class="text-lg text-gray-600 mb-8" x-text="text.result.error.message"></p>
                                
                                <div class="bg-red-50 p-6 rounded-lg mb-8">
                                    <h3 class="font-semibold text-red-900 mb-2" x-text="text.result.error.details"></h3>
                                    <p class="text-sm text-red-800" x-text="creationResult.error"></p>
                                </div>

                                <div class="space-x-4">
                                    <button @click="currentStep = 7" class="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 font-medium" x-text="text.result.error.retry"></button>
                                    <button @click="currentStep = 0" class="border border-gray-300 px-8 py-3 rounded-lg hover:bg-gray-50 font-medium" x-text="text.result.error.restart"></button>
                                </div>
                            </div>
                        </template>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <script>
        function enhancedWizardApp() {
            return {
                currentStep: 0,
                language: 'fr',
                showHelp: false,
                showTemplatePreview: null,
                showGeneratedPreview: false,
                isCreating: false,
                availableTemplates: [], // Initialize as empty array
                selectedTemplateData: null,
                
                // Enhanced steps structure
                steps: [
                    { title: 'Bienvenue', completed: false },
                    { title: 'Modèle', completed: false },
                    { title: 'Informations', completed: false },
                    { title: 'Contenu', completed: false },
                    { title: 'Images', completed: false },
                    { title: 'Révision', completed: false },
                    { title: 'Fonctionnalités', completed: false },
                    { title: 'Création', completed: false }
                ],

                // Comprehensive wizard data
                wizardData: {
                    siteLanguage: 'fr', // Language for the generated website
                    termsAccepted: false,
                    selectedTemplate: 'custom',
                    siteName: '',
                    businessType: '',
                    businessDescription: '',
                    domain: '',
                    slogan: '',
                    // Step 3: Images & Logo
                    imageApproach: '', // 'manual', 'ai', 'mixed'
                    images: {
                        logo: null,          // Logo navbar (clair)
                        logoFooter: null,    // Logo footer (sombre)
                        hero: null,          // Image hero
                        faviconLight: null,  // Favicon clair
                        faviconDark: null,   // Favicon sombre
                        services: []
                    },
                    aiStyle: 'modern',
                    imageChoices: {
                        logo: 'upload',         // Logo navbar (clair)
                        logoFooter: 'upload',   // Logo footer (sombre)
                        hero: 'upload',         // Image hero
                        faviconLight: 'upload', // Favicon clair
                        faviconDark: 'upload'   // Favicon sombre
                    },
                    logo: null,
                    selectedColorPalette: 'blue',
                    colors: {
                        primary: '#3B82F6',
                        secondary: '#60A5FA',
                        accent: '#93C5FD'
                    },
                    activities: [
                        { name: '', description: '', id: 1 }
                    ],
                    hero: {
                        title: '',
                        subtitle: '',
                        description: ''
                    },
                    about: {
                        title: '',
                        subtitle: '',
                        description: '',
                        values: []
                    },
                    testimonials: [],
                    faq: [],
                    servicesPage: {
                        subtitle: '',
                        ctaTitle: '',
                        ctaDescription: ''
                    },
                    contact: {
                        email: '',
                        phone: '',
                        address: ''
                    },
                    features: {
                        blog: false,
                        newsletter: false
                    },
                    blog: {
                        categories: '',
                        initialPosts: '3'
                    },
                    seo: {
                        description: '',
                        keywords: ''
                    },
                    saveAsTemplate: false,
                    templateName: '',
                    templateDescription: ''
                },

                // Generated content for review
                generatedContent: {
                    hero: {
                        title: '',
                        subtitle: '',
                        description: ''
                    }
                },

                // AI Request tracking
                aiRequest: {
                    id: null,
                    status: null, // 'pending', 'assigned', 'processing', 'completed', 'rejected'
                    generatedContent: null,
                    estimatedCost: 2.00,
                    pollInterval: null,
                    timerInterval: null,
                    startTime: null,
                    elapsedTime: '00:00'
                },

                // Creation result
                creationResult: {
                    success: false,
                    siteId: '',
                    template: '',
                    error: ''
                },

                // Enhanced business types with terminology
                businessTypes: {
                    translation: {
                        name: 'Services de Traduction',
                        description: 'Services professionnels de traduction et localisation',
                        terminology: 'services',
                        colors: { primary: '#059669', secondary: '#10B981', accent: '#34D399' }
                    },
                    education: {
                        name: 'Éducation et Formation',
                        description: 'Établissements d\'enseignement et centres de formation',
                        terminology: 'cours',
                        colors: { primary: '#3B82F6', secondary: '#60A5FA', accent: '#93C5FD' }
                    },
                    creative: {
                        name: 'Services Créatifs',
                        description: 'Design, art, et services créatifs',
                        terminology: 'créations',
                        colors: { primary: '#8B5CF6', secondary: '#A78BFA', accent: '#C4B5FD' }
                    },
                    business: {
                        name: 'Conseil en Entreprise',
                        description: 'Consulting et services aux entreprises',
                        terminology: 'services',
                        colors: { primary: '#1F2937', secondary: '#4B5563', accent: '#6B7280' }
                    },
                    plumbing: {
                        name: 'Plomberie',
                        description: 'Services de plomberie et réparations',
                        terminology: 'interventions',
                        colors: { primary: '#0891B2', secondary: '#06B6D4', accent: '#22D3EE' }
                    },
                    restaurant: {
                        name: 'Restaurant et Gastronomie',
                        description: 'Restaurants, cafés, et services de restauration',
                        terminology: 'spécialités',
                        colors: { primary: '#DC2626', secondary: '#EF4444', accent: '#F87171' }
                    }
                },

                // Color palettes
                colorPalettes: {
                    blue: { primary: '#3B82F6', secondary: '#60A5FA', accent: '#93C5FD' },
                    green: { primary: '#059669', secondary: '#10B981', accent: '#34D399' },
                    purple: { primary: '#8B5CF6', secondary: '#A78BFA', accent: '#C4B5FD' },
                    red: { primary: '#DC2626', secondary: '#EF4444', accent: '#F87171' },
                    gray: { primary: '#1F2937', secondary: '#4B5563', accent: '#6B7280' },
                    cyan: { primary: '#0891B2', secondary: '#06B6D4', accent: '#22D3EE' }
                },

                // Computed property for current language text
                get text() {
                    return this.translations[this.language] || this.translations.fr;
                },

                // Multilingual text content
                translations: {
                    fr: {
                        common: {
                            next: 'Suivant',
                            previous: 'Précédent',
                            close: 'Fermer',
                            start: 'Commencer',
                            remove: 'Supprimer',
                            enabled: 'Activé',
                            uploaded: 'Téléchargé'
                        },
                        help: {
                            title: 'Aide de l\'assistant',
                            navigation: '• Utilisez les boutons Suivant/Précédent pour naviguer',
                            autosave: '• Votre progression est automatiquement sauvegardée',
                            optional: '• Vous pouvez ignorer les étapes optionnelles',
                            review: '• Vérifiez tous les paramètres avant la création finale'
                        },
                        welcome: {
                            title: 'Bienvenue dans l\'Assistant de Création de Site',
                            subtitle: 'Créez votre site web professionnel en quelques étapes simples',
                            language: 'Choisissez votre langue',
                            terms: {
                                title: 'Conditions d\'utilisation',
                                item1: '• Vos données sont traitées de manière sécurisée',
                                item2: '• Vous conservez tous les droits sur votre contenu',
                                item3: '• Le site généré vous appartient entièrement',
                                accept: 'J\'accepte les conditions d\'utilisation'
                            }
                        },
                        template: {
                            title: 'Choisissez un Modèle',
                            subtitle: 'Sélectionnez un modèle de base ou créez le vôtre',
                            custom: {
                                title: 'Modèle Personnalisé',
                                description: 'Créez votre site à partir de zéro'
                            },
                            preview: 'Aperçu du modèle',
                            previewColors: 'Couleurs',
                            previewFeatures: 'Fonctionnalités',
                            features: {
                                blog: 'Blog intégré',
                                testimonials: 'Témoignages',
                                faq: 'Questions fréquentes'
                            }
                        },
                        business: {
                            title: 'Informations sur votre Entreprise',
                            siteName: 'Nom du site',
                            siteNamePlaceholder: 'Mon Entreprise',
                            businessType: 'Type d\'activité',
                            selectBusinessType: 'Sélectionnez votre secteur',
                            domain: 'Nom de domaine',
                            domainPlaceholder: 'mon-entreprise.com',
                            slogan: 'Slogan',
                            sloganPlaceholder: 'Votre slogan accrocheur',
                            typeInfo: 'Informations sur ce secteur',
                            terminology: 'Terminologie utilisée: '
                        },
                        branding: {
                            title: 'Identité et Branding',
                            logo: {
                                title: 'Logo de votre entreprise',
                                upload: 'Cliquez ou glissez votre logo ici',
                                formats: 'PNG, JPG, SVG (max 2MB)',
                                uploaded: 'Logo téléchargé avec succès'
                            },
                            colors: {
                                title: 'Palette de couleurs',
                                custom: 'Couleurs personnalisées',
                                primary: 'Primaire',
                                secondary: 'Secondaire',
                                accent: 'Accent'
                            }
                        },
                        images: {
                            title: 'Images et Assets',
                            subtitle: 'Téléchargez les images et logos pour votre site',
                            approach: 'Choisissez votre approche pour les images'
                        },
                        content: {
                            title: 'Contenu et Activités',
                            activities: {
                                title: 'Vos activités',
                                default: 'activités',
                                add: 'Ajouter une activité',
                                name: 'Nom de l\'activité',
                                namePlaceholder: 'Ex: Traduction de documents',
                                description: 'Description',
                                descriptionPlaceholder: 'Décrivez cette activité en quelques mots'
                            },
                            contact: {
                                title: 'Informations de contact',
                                email: 'Email',
                                emailPlaceholder: 'contact@mon-entreprise.com',
                                phone: 'Téléphone',
                                phonePlaceholder: '+33 1 23 45 67 89',
                                address: 'Adresse',
                                addressPlaceholder: '123 Rue de la République, 75001 Paris'
                            }
                        },
                        review: {
                            title: 'Révision du Contenu',
                            subtitle: 'Vérifiez et modifiez le contenu généré pour votre site',
                            preview: {
                                title: 'Aperçu du contenu généré',
                                activities: 'Vos activités'
                            },
                            edit: {
                                title: 'Modifier le contenu',
                                heroTitle: 'Titre principal',
                                heroSubtitle: 'Sous-titre',
                                heroDescription: 'Description'
                            },
                            regenerate: 'Régénérer le contenu'
                        },
                        advanced: {
                            title: 'Fonctionnalités Avancées',
                            subtitle: 'Configurez les fonctionnalités supplémentaires de votre site',
                            blog: {
                                title: 'Blog',
                                enable: 'Activer le blog',
                                categories: 'Catégories du blog',
                                categoriesPlaceholder: 'Actualités, Conseils, Guides',
                                initialPosts: 'Articles initiaux'
                            },
                            newsletter: {
                                title: 'Newsletter',
                                enable: 'Activer la newsletter',
                                description: 'Permet aux visiteurs de s\'inscrire à votre newsletter'
                            },
                            seo: {
                                title: 'Référencement SEO',
                                description: 'Description SEO',
                                descriptionPlaceholder: 'Description de votre site pour les moteurs de recherche',
                                keywords: 'Mots-clés',
                                keywordsPlaceholder: 'mot-clé1, mot-clé2, mot-clé3'
                            }
                        },
                        final: {
                            title: 'Révision Finale et Création',
                            subtitle: 'Vérifiez tous vos paramètres avant de créer votre site',
                            summary: {
                                title: 'Résumé de la configuration',
                                basic: 'Informations de base',
                                features: 'Fonctionnalités'
                            },
                            template: {
                                title: 'Sauvegarder comme modèle',
                                save: 'Sauvegarder cette configuration comme modèle réutilisable',
                                name: 'Nom du modèle',
                                namePlaceholder: 'Mon modèle personnalisé',
                                description: 'Description du modèle',
                                descriptionPlaceholder: 'Description de ce modèle'
                            },
                            create: 'Créer mon site',
                            creating: 'Création en cours...'
                        },
                        result: {
                            success: {
                                title: 'Site créé avec succès !',
                                message: 'Votre site web est maintenant prêt et déployé.',
                                details: 'Détails de la création',
                                siteId: 'ID du site',
                                template: 'Modèle sauvegardé',
                                status: 'Statut',
                                ready: 'Prêt',
                                view: 'Voir mon site',
                                dashboard: 'Tableau de bord'
                            },
                            error: {
                                title: 'Erreur lors de la création',
                                message: 'Une erreur s\'est produite lors de la création de votre site.',
                                details: 'Détails de l\'erreur',
                                retry: 'Réessayer',
                                restart: 'Recommencer'
                            }
                        }
                    }
                },

                // Computed properties
                get selectedBusinessType() {
                    return this.businessTypes[this.wizardData.businessType];
                },

                // Initialization
                init() {
                    // Ensure default template is selected
                    if (!this.wizardData.selectedTemplate) {
                        this.wizardData.selectedTemplate = 'custom';
                    }
                    
                    // Ensure activities array is properly initialized
                    if (!this.wizardData.activities || !Array.isArray(this.wizardData.activities)) {
                        this.wizardData.activities = [{ name: '', description: '', id: 1 }];
                    }
                    
                    // Ensure availableTemplates is initialized
                    if (!this.availableTemplates) {
                        this.availableTemplates = [];
                    }
                    
                    this.loadTemplates();
                    this.generateContent();
                    this.updateLanguage();
                    this.loadSavedData(); // Load any saved progress
                    
                    // Auto-save functionality
                    this.$watch('wizardData', () => {
                        this.autoSave();
                    }, { deep: true });
                    
                    // Global click handler to close suggestions
                    document.addEventListener('click', (e) => {
                        if (!e.target.closest('.relative')) {
                            this.showBusinessTypeSuggestions = false;
                        }
                    });
                },

                // Language management
                updateLanguage() {
                    this.language = this.wizardData.language;
                    // Update step titles based on language
                    if (this.language === 'fr') {
                        this.steps.forEach((step, index) => {
                            const titles = ['Bienvenue', 'Modèle', 'Informations', 'Identité', 'Contenu', 'Révision', 'Fonctionnalités', 'Création'];
                            step.title = titles[index];
                        });
                    }
                },

                // Template management
                async loadTemplates() {
                    try {
                        const response = await fetch('/api/templates');
                        const result = await response.json();
                        
                        // Handle API response format: {success: true, templates: [...]}
                        if (result.success && result.templates) {
                            this.availableTemplates = result.templates;
                        } else {
                            this.availableTemplates = [];
                        }
                        
                        // Auto-select Template Basic if it exists and no template is selected
                        if (this.availableTemplates.length > 0 && !this.wizardData.selectedTemplate) {
                            const basicTemplate = this.availableTemplates.find(t => t.name === 'template-base');
                            if (basicTemplate) {
                                await this.selectTemplate(basicTemplate.name);
                            }
                        }
                    } catch (error) {
                        console.error('Error loading templates:', error);
                        this.availableTemplates = [];
                    }
                },

                async selectTemplate(templateName) {
                    this.wizardData.selectedTemplate = templateName;
                    
                    if (templateName !== 'custom') {
                        try {
                            const response = await fetch(`/api/templates/${templateName}`);
                            this.selectedTemplateData = await response.json();
                            
                            // Apply template defaults
                            if (this.selectedTemplateData.brand?.colors) {
                                this.wizardData.colors = { ...this.selectedTemplateData.brand.colors };
                            }
                        } catch (error) {
                            console.error('Error loading template data:', error);
                        }
                    }
                },

                // Business type management (enhanced for Step 2)
                showBusinessTypeSuggestions: false,
                filteredBusinessTypes: [],
                errors: {
                    siteName: '',
                    businessType: '',
                    domain: ''
                },
                
                updateBusinessType() {
                    const businessType = this.selectedBusinessType;
                    if (businessType && businessType.colors) {
                        this.wizardData.colors = { ...businessType.colors };
                        this.wizardData.selectedColorPalette = 'custom';
                    }
                    this.generateContent();
                },
                
                handleBusinessTypeInput(event) {
                    const value = event.target.value.toLowerCase();
                    this.showBusinessTypeSuggestions = value.length > 0;
                    
                    // Filter business types based on input
                    this.filteredBusinessTypes = Object.entries(this.businessTypes)
                        .filter(([key, type]) => {
                            return type.name.toLowerCase().includes(value) || 
                                   type.description.toLowerCase().includes(value) ||
                                   key.toLowerCase().includes(value);
                        })
                        .map(([key, type]) => ({
                            key: key,
                            name: type.name,
                            description: type.description
                        }))
                        .slice(0, 5); // Limit to 5 suggestions
                        
                    // Clear business type error when typing
                    this.errors.businessType = '';
                },
                
                selectBusinessTypeSuggestion(key, name) {
                    this.wizardData.businessType = key;
                    this.showBusinessTypeSuggestions = false;
                    this.updateBusinessType();
                },
                
                // Validation methods
                validateSiteName() {
                    if (!this.wizardData.siteName || this.wizardData.siteName.length < 3) {
                        this.errors.siteName = 'Le nom du site doit contenir au moins 3 caractères';
                        return false;
                    }
                    if (this.wizardData.siteName.length > 50) {
                        this.errors.siteName = 'Le nom du site ne peut pas dépasser 50 caractères';
                        return false;
                    }
                    this.errors.siteName = '';
                    return true;
                },
                
                validateDomain() {
                    if (!this.wizardData.domain) {
                        this.errors.domain = '';
                        return true; // Optional field
                    }
                    
                    const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z]{2,}$/;
                    if (!domainRegex.test(this.wizardData.domain)) {
                        this.errors.domain = 'Format invalide (ex: mon-site.com)';
                        return false;
                    }
                    this.errors.domain = '';
                    return true;
                },
                
                canProceedFromStep2() {
                    return this.wizardData.siteName && 
                           this.wizardData.siteName.length >= 3 && 
                           this.wizardData.businessType && 
                           this.wizardData.businessType.length >= 3 &&
                           (!this.wizardData.domain || this.validateDomain());
                },
                
                generateSiteId(siteName) {
                    if (!siteName) return '';
                    return siteName
                        .toLowerCase()
                        .replace(/[^a-z0-9]+/g, '-')
                        .replace(/^-|-$/g, '')
                        .substring(0, 30);
                },
                
                // Step 3: Image Management Methods
                selectImageApproach(approach) {
                    this.wizardData.imageApproach = approach;
                    
                    // Reset image choices when switching approach
                    if (approach === 'manual') {
                        this.wizardData.imageChoices = {
                            logo: 'upload',
                            logoFooter: 'upload',
                            hero: 'upload', 
                            faviconLight: 'upload',
                            faviconDark: 'upload'
                        };
                    } else if (approach === 'ai') {
                        this.wizardData.imageChoices = {
                            logo: 'ai',
                            logoFooter: 'ai',
                            hero: 'ai',
                            faviconLight: 'ai',
                            faviconDark: 'ai'
                        };
                    }
                    // Mixed keeps current choices
                },
                
                handleFileUpload(event, imageType) {
                    const file = event.target.files[0];
                    if (!file) return;
                    
                    // Validate file size (5MB max for logo, 2MB for others)
                    const maxSize = imageType === 'logo' ? 5 * 1024 * 1024 : 2 * 1024 * 1024;
                    if (file.size > maxSize) {
                        alert(`Fichier trop volumineux. Max ${imageType === 'logo' ? '5MB' : '2MB'}.`);
                        return;
                    }
                    
                    // Validate file type
                    if (!file.type.startsWith('image/')) {
                        alert('Seuls les fichiers image sont acceptés.');
                        return;
                    }
                    
                    // Create preview
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        this.wizardData.images[imageType] = e.target.result;
                    };
                    reader.readAsDataURL(file);
                },
                
                handleFileDrop(event, imageType) {
                    event.preventDefault();
                    const files = event.dataTransfer.files;
                    if (files.length > 0) {
                        // Simulate file input change
                        const fakeEvent = {
                            target: { files: files }
                        };
                        this.handleFileUpload(fakeEvent, imageType);
                    }
                },
                
                removeImage(imageType) {
                    this.wizardData.images[imageType] = null;
                },
                
                setImageChoice(imageType, choice) {
                    this.wizardData.imageChoices[imageType] = choice;
                    
                    // Clear uploaded image if switching to AI
                    if (choice === 'ai') {
                        this.wizardData.images[imageType] = null;
                    }
                },
                
                calculateMixedCost() {
                    let cost = 0;
                    const prices = {
                        logo: 1.50,           // Logo Navbar (clair)
                        logoFooter: 1.50,     // Logo Footer (sombre)
                        hero: 1.50,           // Image Hero
                        faviconLight: 0.50,   // Favicon clair
                        faviconDark: 0.50     // Favicon sombre
                    };
                    
                    Object.keys(this.wizardData.imageChoices).forEach(imageType => {
                        if (this.wizardData.imageChoices[imageType] === 'ai') {
                            cost += prices[imageType] || 0;
                        }
                    });
                    
                    return cost.toFixed(2) + '€';
                },
                
                canProceedFromStep3() {
                    // Must select an approach
                    if (!this.wizardData.imageApproach) return false;
                    
                    // For manual approach, logo is required
                    if (this.wizardData.imageApproach === 'manual') {
                        return this.wizardData.images.logo !== null;
                    }
                    
                    // For AI approach, always valid (will generate)
                    if (this.wizardData.imageApproach === 'ai') {
                        return true;
                    }
                    
                    // For mixed approach, must have all required images (upload OR ai)
                    if (this.wizardData.imageApproach === 'mixed') {
                        const requiredChoices = ['logo', 'logoFooter', 'hero', 'faviconLight', 'faviconDark'];
                        return requiredChoices.every(imageType => {
                            return this.wizardData.imageChoices[imageType] === 'ai' || 
                                   this.wizardData.images[imageType] !== null;
                        });
                    }
                    
                    return false;
                },

                // Logo management
                handleLogoUpload(event) {
                    const file = event.target.files[0];
                    if (file) {
                        this.processLogoFile(file);
                    }
                },

                handleLogoDrop(event) {
                    event.preventDefault();
                    const file = event.dataTransfer.files[0];
                    if (file && file.type.startsWith('image/')) {
                        this.processLogoFile(file);
                    }
                },

                processLogoFile(file) {
                    if (file.size > 2 * 1024 * 1024) { // 2MB limit
                        alert('Le fichier est trop volumineux. Maximum 2MB.');
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = (e) => {
                        this.wizardData.logo = e.target.result;
                    };
                    reader.readAsDataURL(file);
                },

                removeLogo() {
                    this.wizardData.logo = null;
                },

                // Color management
                selectColorPalette(paletteName) {
                    this.wizardData.selectedColorPalette = paletteName;
                    this.wizardData.colors = { ...this.colorPalettes[paletteName] };
                },

                updateCustomColors() {
                    this.wizardData.selectedColorPalette = 'custom';
                },

                // Activity management
                addActivity() {
                    const newId = Date.now() + Math.random(); // Unique ID
                    this.wizardData.activities.push({ name: '', description: '', id: newId });
                },

                removeActivity(index) {
                    if (this.wizardData.activities.length > 1) {
                        this.wizardData.activities.splice(index, 1);
                    }
                },

                // AI Integration Functions
                async generateCompleteContent() {
                    try {
                        // Generate ALL content types in one request
                        const requestData = {
                            customer_id: this.generateCustomerId(),
                            site_id: this.generateSiteId(),
                            request_type: 'content', // Always generate complete content
                            business_type: this.wizardData.businessType,
                            terminology: this.selectedBusinessType?.terminology || 'services',
                            request_data: {
                                siteName: this.wizardData.siteName,
                                businessType: this.wizardData.businessType,
                                domain: this.wizardData.domain,
                                slogan: this.wizardData.slogan,
                                businessDescription: this.wizardData.businessDescription,
                                colors: this.wizardData.colors,
                                existingServices: this.wizardData.activities
                            },
                            wizard_session_id: this.sessionId,
                            estimated_cost: this.aiRequest.estimatedCost
                        };

                        const response = await fetch('/admin/queue/create', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(requestData)
                        });

                        if (response.ok) {
                            const result = await response.json();
                            this.aiRequest.id = result.request_id;
                            this.aiRequest.status = 'pending';
                            this.aiRequest.startTime = Date.now();
                            this.aiRequest.elapsedTime = '00:00';
                            
                            // Start polling for status updates
                            this.startPollingAIStatus();
                            // Start timer
                            this.startElapsedTimer();
                            
                            // Show success message
                            this.showNotification('Demande IA créée ! Un expert va traiter votre demande.', 'success');
                        } else {
                            throw new Error('Failed to create AI request');
                        }
                    } catch (error) {
                        console.error('AI request error:', error);
                        this.showNotification('Erreur lors de la création de la demande IA. Veuillez réessayer.', 'error');
                    }
                },

                startPollingAIStatus() {
                    if (this.aiRequest.pollInterval) {
                        clearInterval(this.aiRequest.pollInterval);
                    }

                    this.aiRequest.pollInterval = setInterval(async () => {
                        try {
                            const response = await fetch(`/admin/status/${this.aiRequest.id}`);
                            if (response.ok) {
                                const result = await response.json();
                                this.aiRequest.status = result.status;
                                
                                if (result.status === 'completed') {
                                    // Get full request details to get generated content
                                    const detailResponse = await fetch(`/admin/request/${this.aiRequest.id}`);
                                    if (detailResponse.ok) {
                                        const detailResult = await detailResponse.json();
                                        this.aiRequest.generatedContent = detailResult.generated_content;
                                        
                                        console.log('🎯 AI content received, length:', detailResult.generated_content?.length);
                                        console.log('🎯 Generated content preview:', detailResult.generated_content?.substring(0, 200));
                                        
                                        // Auto-apply generated content immediately with robust error handling
                                        try {
                                            this.applyGeneratedContent();
                                            console.log('✅ applyGeneratedContent() called successfully');
                                            
                                            // Force Alpine.js reactivity update
                                            this.$nextTick(() => {
                                                // Trigger Vue/Alpine reactivity by reassigning
                                                this.wizardData = { ...this.wizardData };
                                                console.log('🔄 Forced reactivity update');
                                            });
                                            
                                            // Verify content was applied
                                            const activitiesAfter = this.wizardData.activities?.length || 0;
                                            const heroAfter = this.wizardData.hero?.title || 'NONE';
                                            console.log('📊 After apply - Activities:', activitiesAfter, 'Hero:', heroAfter);
                                            
                                        } catch (applyError) {
                                            console.error('❌ applyGeneratedContent() failed:', applyError);
                                            this.showNotification('Erreur lors de l\'application du contenu. Détails dans la console.', 'error');
                                            return;
                                        }
                                        
                                        this.showNotification('Contenu IA appliqué avec succès ! Vous pouvez maintenant le réviser et modifier.', 'success');
                                    }
                                    
                                    clearInterval(this.aiRequest.pollInterval);
                                    this.stopElapsedTimer();
                                } else if (result.status === 'rejected') {
                                    this.showNotification('Demande IA rejetée. Veuillez contacter le support.', 'error');
                                    clearInterval(this.aiRequest.pollInterval);
                                    this.stopElapsedTimer();
                                }
                            }
                        } catch (error) {
                            console.error('Status polling error:', error);
                        }
                    }, 5000); // Poll every 5 seconds
                },

                startElapsedTimer() {
                    if (this.aiRequest.timerInterval) {
                        clearInterval(this.aiRequest.timerInterval);
                    }

                    this.aiRequest.timerInterval = setInterval(() => {
                        if (this.aiRequest.startTime) {
                            const elapsed = Math.floor((Date.now() - this.aiRequest.startTime) / 1000);
                            const minutes = Math.floor(elapsed / 60);
                            const seconds = elapsed % 60;
                            this.aiRequest.elapsedTime = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                        }
                    }, 1000);
                },

                stopElapsedTimer() {
                    if (this.aiRequest.timerInterval) {
                        clearInterval(this.aiRequest.timerInterval);
                        this.aiRequest.timerInterval = null;
                    }
                },

                applyGeneratedContent() {
                    console.log('🔧 applyGeneratedContent() called');
                    console.log('🔧 generatedContent exists:', !!this.aiRequest.generatedContent);
                    
                    if (this.aiRequest.generatedContent) {
                        try {
                            console.log('🔧 Parsing JSON content...');
                            let content = JSON.parse(this.aiRequest.generatedContent);
                            
                            // Handle double-encoded JSON (string within string)
                            if (typeof content === 'string') {
                                console.log('🔧 Double-encoded JSON detected, parsing again...');
                                content = JSON.parse(content);
                            }
                            
                            console.log('✅ JSON parsed successfully:', Object.keys(content));
                        
                        // Apply all generated content
                        if (content.services) {
                            console.log('🔧 Applying services:', content.services.length, 'services');
                            const beforeCount = this.wizardData.activities?.length || 0;
                            
                            // Replace current activities with AI generated services
                            // Clear existing activities first to ensure Alpine.js detects changes
                            this.wizardData.activities = [];
                            
                            // Add new activities one by one to trigger reactivity
                            const newActivities = content.services.map((service, index) => ({
                                id: Date.now() + index,
                                name: service.name || service.title,
                                description: service.description,
                                features: service.features || [],
                                price: service.price || '',
                                category: service.category || ''
                            }));
                            
                            // Force reactivity by pushing each item
                            newActivities.forEach(activity => {
                                this.wizardData.activities.push(activity);
                            });
                            
                            const afterCount = this.wizardData.activities?.length || 0;
                            console.log('✅ Services applied:', beforeCount, '=>', afterCount);
                        }
                        
                        // Apply hero content
                        if (content.hero) {
                            console.log('🔧 Applying hero content');
                            const beforeHero = this.wizardData.hero?.title || 'NONE';
                            
                            // Ensure hero object exists
                            if (!this.wizardData.hero) {
                                this.wizardData.hero = {};
                            }
                            
                            // Apply each property individually to trigger reactivity
                            this.wizardData.hero.title = content.hero.title || this.wizardData.siteName;
                            this.wizardData.hero.subtitle = content.hero.subtitle || '';
                            this.wizardData.hero.description = content.hero.description || '';
                            
                            const afterHero = this.wizardData.hero?.title || 'NONE';
                            console.log('✅ Hero applied:', beforeHero, '=>', afterHero);
                        }
                        
                        // Apply about content
                        if (content.about) {
                            this.wizardData.about = {
                                title: content.about.title || `À propos de ${this.wizardData.siteName}`,
                                subtitle: content.about.subtitle || '',
                                description: content.about.description || '',
                                values: content.about.values || []
                            };
                        }
                        
                        // Apply testimonials
                        if (content.testimonials) {
                            this.wizardData.testimonials = content.testimonials;
                        }
                        
                        // Apply FAQ
                        if (content.faq) {
                            this.wizardData.faq = content.faq;
                        }
                        
                        // Apply services page content
                        if (content.servicesPage) {
                            this.wizardData.servicesPage = content.servicesPage;
                        }
                        
                        // Apply SEO content
                        if (content.seo) {
                            this.wizardData.seo = content.seo;
                        }
                        
                        this.showNotification('Contenu complet appliqué avec succès !', 'success');
                        
                        // Force complete Alpine.js update with aggressive DOM manipulation
                        console.log('🔄 Forcing complete Alpine.js reactivity update...');
                        
                        // Method 1: Trigger Alpine.js reactivity with manual proxy update
                        const originalActivities = this.wizardData.activities;
                        this.wizardData.activities = [];
                        
                        // Force Alpine.js to re-process the template
                        this.$nextTick(() => {
                            // Now set the new activities
                            this.wizardData.activities = originalActivities;
                            
                            console.log('🔄 Activities reset and restored');
                            console.log('📊 Final activities count:', this.wizardData.activities.length);
                            console.log('📊 First activity:', this.wizardData.activities[0]);
                            
                            // Additional DOM manipulation after Alpine.js processes
                            this.$nextTick(() => {
                                console.log('🔄 Second tick - forcing input values...');
                                
                                // Manually set input values as backup
                                const activityInputs = document.querySelectorAll('input[x-model*="activity.name"]');
                                console.log('📊 Found activity name inputs:', activityInputs.length);
                                
                                activityInputs.forEach((input, index) => {
                                    const activity = this.wizardData.activities[index];
                                    if (activity && activity.name) {
                                        console.log(`🔧 Setting input ${index} value to: "${activity.name}"`);
                                        input.value = activity.name;
                                        input.dispatchEvent(new Event('input', { bubbles: true }));
                                    }
                                });
                                
                                // Do the same for description fields
                                const descInputs = document.querySelectorAll('textarea[x-model*="activity.description"]');
                                console.log('📊 Found description inputs:', descInputs.length);
                                
                                descInputs.forEach((input, index) => {
                                    const activity = this.wizardData.activities[index];
                                    if (activity && activity.description) {
                                        console.log(`🔧 Setting description ${index} value to: "${activity.description.substring(0, 50)}..."`);
                                        input.value = activity.description;
                                        input.dispatchEvent(new Event('input', { bubbles: true }));
                                    }
                                });
                                
                                console.log('✅ Manual input value setting completed');
                            });
                        });
                        
                        // Don't clear AI request - keep status and generatedContent for review section
                        // Only clear the ID to prevent re-processing
                        this.aiRequest.id = null;
                        
                        } catch (error) {
                            console.error('Error parsing generated content:', error);
                            this.showNotification('Erreur lors de l\'application du contenu généré. Veuillez contacter le support.', 'error');
                        }
                    }
                },

                getAIStatusClass() {
                    const classes = {
                        'pending': 'bg-yellow-50 border-yellow-200',
                        'assigned': 'bg-blue-50 border-blue-200',
                        'processing': 'bg-purple-50 border-purple-200',
                        'completed': 'bg-green-50 border-green-200',
                        'rejected': 'bg-red-50 border-red-200'
                    };
                    return classes[this.aiRequest.status] || 'bg-gray-50 border-gray-200';
                },

                getAIStatusMessage() {
                    const messages = {
                        'pending': 'Demande en attente de traitement...',
                        'assigned': 'Demande assignée à un expert...',
                        'processing': 'Génération de contenu en cours...',
                        'completed': 'Contenu généré avec succès !',
                        'rejected': 'Demande rejetée - contactez le support'
                    };
                    return messages[this.aiRequest.status] || 'Statut inconnu';
                },

                generateCustomerId() {
                    return 'wizard-customer-' + (this.sessionId || Date.now());
                },

                generateSiteId() {
                    const sanitized = (this.wizardData.siteName || 'site').toLowerCase()
                        .replace(/[^a-z0-9]/g, '-')
                        .replace(/-+/g, '-')
                        .replace(/^-|-$/g, '');
                    return sanitized + '-' + Date.now();
                },

                // Content generation
                generateContent() {
                    const businessType = this.selectedBusinessType;
                    const siteName = this.wizardData.siteName || 'Votre Entreprise';
                    const slogan = this.wizardData.slogan || businessType?.description || 'Services professionnels';
                    
                    this.generatedContent.hero = {
                        title: slogan,
                        subtitle: businessType?.description || 'Services professionnels de qualité',
                        description: `${siteName} offre des ${businessType?.terminology || 'services'} professionnels adaptés à vos besoins spécifiques.`
                    };
                },

                regenerateContent() {
                    this.generateContent();
                },

                // Navigation
                nextStep() {
                    if (this.currentStep < this.steps.length - 1) {
                        this.steps[this.currentStep].completed = true;
                        this.currentStep++;
                        
                        // Generate content when moving to review step
                        if (this.currentStep === 5) {
                            this.generateContent();
                        }
                    }
                },

                prevStep() {
                    if (this.currentStep > 0) {
                        this.currentStep--;
                    }
                },

                // Site creation
                async createSite(isDraft = false) {
                    this.isCreating = true;
                    
                    try {
                        // Prepare site data with enhanced structure
                        const siteData = {
                            name: this.wizardData.siteName,
                            businessType: this.wizardData.businessType,
                            domain: this.wizardData.domain,
                            slogan: this.wizardData.slogan,
                            colors: this.wizardData.colors,
                            services: this.wizardData.activities.map(activity => ({
                                title: activity.name,
                                description: activity.description
                            })),
                            contact: this.wizardData.contact,
                            features: this.wizardData.features,
                            seo: this.wizardData.seo,
                            template: this.wizardData.selectedTemplate !== 'custom' ? this.wizardData.selectedTemplate : null,
                            generatedContent: this.generatedContent,
                            logo: this.wizardData.logo
                        };

                        // Create site
                        const response = await fetch('/api/sites/create', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                customerId: 'b131e26a1d916c086088491ea6ed0cfa', // wizard-user customer ID
                                siteData: siteData,
                                saveAsTemplate: this.wizardData.saveAsTemplate,
                                templateName: this.wizardData.templateName,
                                templateDescription: this.wizardData.templateDescription
                            })
                        });

                        const result = await response.json();

                        if (response.ok && !result.error) {
                            this.creationResult = {
                                success: true,
                                siteId: result.siteId || this.wizardData.siteName.toLowerCase().replace(/[^a-z0-9]+/g, '-'),
                                template: this.wizardData.saveAsTemplate ? this.wizardData.templateName : '',
                                error: ''
                            };
                        } else {
                            throw new Error(result.details || result.error || 'Erreur de création');
                        }
                    } catch (error) {
                        console.error('Site creation error:', error);
                        this.creationResult = {
                            success: false,
                            siteId: '',
                            template: '',
                            error: error.message
                        };
                    }

                    this.isCreating = false;
                    this.nextStep(); // Move to result step
                },

                // Result actions
                viewSite() {
                    // Implementation depends on your deployment strategy
                    window.open(`/sites/${this.creationResult.siteId}`, '_blank');
                },

                openDashboard() {
                    window.open('/admin', '_blank');
                },

                // Notification system
                showNotification(message, type = 'info') {
                    // Create a simple toast notification
                    const toast = document.createElement('div');
                    toast.className = `fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${
                        type === 'success' ? 'bg-green-500 text-white' :
                        type === 'error' ? 'bg-red-500 text-white' :
                        'bg-blue-500 text-white'
                    }`;
                    toast.textContent = message;
                    
                    document.body.appendChild(toast);
                    
                    // Remove after 5 seconds
                    setTimeout(() => {
                        if (toast.parentElement) {
                            toast.parentElement.removeChild(toast);
                        }
                    }, 5000);
                },

                // Auto-save functionality
                autoSave() {
                    localStorage.setItem('wizardData', JSON.stringify(this.wizardData));
                },

                loadSavedData() {
                    const saved = localStorage.getItem('wizardData');
                    if (saved) {
                        try {
                            this.wizardData = { ...this.wizardData, ...JSON.parse(saved) };
                        } catch (error) {
                            console.error('Error loading saved data:', error);
                        }
                    }
                }
            };
        }
    </script>
</body>
</html>
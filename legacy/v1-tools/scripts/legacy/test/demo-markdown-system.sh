#!/bin/bash

# Script de d√©monstration rapide du syst√®me Markdown v1.1.1.7
# Usage: ./demo-markdown-system.sh

set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

echo -e "${PURPLE}üé≠ D√âMONSTRATION SYST√àME MARKDOWN v1.1.1.7${NC}"
echo "======================================================"

# Variables
SITE_NAME="qalyarab"
OUTPUT_DIR="generated-sites/$SITE_NAME"

echo ""
echo -e "${BLUE}üìä √âTAT ACTUEL DU SYST√àME${NC}"
echo "======================================================"

# Compter les articles Markdown
MARKDOWN_COUNT=$(find content/blog -name "*.md" 2>/dev/null | wc -l)
echo "  üìù Articles Markdown disponibles: $MARKDOWN_COUNT"

if [ $MARKDOWN_COUNT -gt 0 ]; then
    echo "  üìÑ Liste des articles:"
    find content/blog -name "*.md" -exec basename {} .md \; | sed 's/^/     ‚Ä¢ /'
fi

# V√©rifier les composants
echo ""
echo "  üîß Composants syst√®me:"
echo "     ‚Ä¢ markdown-loader.js: $([ -f "template-base/src/config/markdown-loader.js" ] && echo "‚úÖ" || echo "‚ùå")"
echo "     ‚Ä¢ BlogPage (m√†j): $(grep -q "getBlogArticles" "template-base/src/pages/blog/BlogPage.jsx" 2>/dev/null && echo "‚úÖ" || echo "‚ùå")"
echo "     ‚Ä¢ BlogArticleRouter (m√†j): $(grep -q "getBlogArticle" "template-base/src/pages/blog/BlogArticleRouter.jsx" 2>/dev/null && echo "‚úÖ" || echo "‚ùå")"
echo "     ‚Ä¢ Script g√©n√©ration (m√†j): $(grep -q "content/blog" "scripts/generate-site.sh" 2>/dev/null && echo "‚úÖ" || echo "‚ùå")"

echo ""
echo -e "${BLUE}üöÄ G√âN√âRATION COMPL√àTE DU SITE${NC}"
echo "======================================================"

# Nettoyer l'ancien build
if [ -d "$OUTPUT_DIR" ]; then
    echo "  üßπ Nettoyage du build pr√©c√©dent..."
    rm -rf "$OUTPUT_DIR"
fi

# G√©n√©rer le site
echo "  üìã G√©n√©ration avec Markdown int√©gr√©..."
if ./scripts/generate-site.sh "$SITE_NAME" --build; then
    echo -e "${GREEN}     ‚úÖ G√©n√©ration r√©ussie !${NC}"
else
    echo -e "${RED}     ‚ùå √âchec de la g√©n√©ration${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}üîç VALIDATION POST-G√âN√âRATION${NC}"
echo "======================================================"

# V√©rifier la copie des fichiers Markdown
COPIED_COUNT=$(find "$OUTPUT_DIR/public/content/blog" -name "*.md" 2>/dev/null | wc -l)
echo "  üìÅ Fichiers Markdown copi√©s: $COPIED_COUNT"

if [ $COPIED_COUNT -gt 0 ]; then
    echo "  üìã Contenu copi√©:"
    find "$OUTPUT_DIR/public/content/blog" -name "*.md" -exec basename {} .md \; | sed 's/^/     ‚Ä¢ /'
fi

# V√©rifier le build de production
echo ""
echo "  üèóÔ∏è  Build de production:"
if [ -d "$OUTPUT_DIR/dist" ]; then
    DIST_SIZE=$(du -sh "$OUTPUT_DIR/dist" | cut -f1)
    echo "     ‚úÖ Build cr√©√© (taille: $DIST_SIZE)"
    
    # V√©rifier les fichiers cl√©s dans dist
    echo "     üìÅ Fichiers cl√©s dans dist/:"
    echo "        ‚Ä¢ index.html: $([ -f "$OUTPUT_DIR/dist/index.html" ] && echo "‚úÖ" || echo "‚ùå")"
    echo "        ‚Ä¢ assets/ : $([ -d "$OUTPUT_DIR/dist/assets" ] && echo "‚úÖ" || echo "‚ùå")"
    echo "        ‚Ä¢ content/ : $([ -d "$OUTPUT_DIR/dist/content" ] && echo "‚úÖ" || echo "‚ùå")"
else
    echo "     ‚ùå Build non trouv√©"
fi

echo ""
echo -e "${BLUE}üì± TEST RAPIDE DU CONTENU${NC}"
echo "======================================================"

# Tester le contenu d'un article
if [ $MARKDOWN_COUNT -gt 0 ]; then
    FIRST_ARTICLE=$(find content/blog -name "*.md" | head -1)
    ARTICLE_NAME=$(basename "$FIRST_ARTICLE" .md)
    
    echo "  üìñ Test de l'article: $ARTICLE_NAME"
    
    # Extraire le titre
    TITLE=$(grep "^title:" "$FIRST_ARTICLE" | sed 's/title: *//' | tr -d '"')
    echo "     ‚Ä¢ Titre: $TITLE"
    
    # Extraire la cat√©gorie
    CATEGORY=$(grep "^category:" "$FIRST_ARTICLE" | sed 's/category: *//' | tr -d '"')
    echo "     ‚Ä¢ Cat√©gorie: $CATEGORY"
    
    # Compter les mots
    WORD_COUNT=$(wc -w < "$FIRST_ARTICLE")
    echo "     ‚Ä¢ Mots: $WORD_COUNT"
    
    # V√©rifier la copie
    COPIED_FILE="$OUTPUT_DIR/public/content/blog/$(basename "$FIRST_ARTICLE")"
    if [ -f "$COPIED_FILE" ]; then
        echo -e "${GREEN}     ‚úÖ Fichier correctement copi√©${NC}"
    else
        echo -e "${RED}     ‚ùå Fichier non copi√©${NC}"
    fi
fi

echo ""
echo -e "${BLUE}‚ö° TESTS DE PERFORMANCE${NC}"
echo "======================================================"

# Test de temps de g√©n√©ration
echo "  ‚è±Ô∏è  Performance de g√©n√©ration:"
START_TIME=$(date +%s)
./scripts/generate-site.sh "$SITE_NAME" > /dev/null 2>&1
END_TIME=$(date +%s)
GENERATION_TIME=$((END_TIME - START_TIME))
echo "     ‚Ä¢ Temps de g√©n√©ration: ${GENERATION_TIME}s"

# Taille des fichiers
echo ""
echo "  üìè Tailles des composants:"
if [ -d "$OUTPUT_DIR" ]; then
    echo "     ‚Ä¢ Source totale: $(du -sh "$OUTPUT_DIR" | cut -f1)"
    echo "     ‚Ä¢ Build dist/: $([ -d "$OUTPUT_DIR/dist" ] && du -sh "$OUTPUT_DIR/dist" | cut -f1 || echo "N/A")"
    echo "     ‚Ä¢ Contenu Markdown: $([ -d "$OUTPUT_DIR/public/content" ] && du -sh "$OUTPUT_DIR/public/content" | cut -f1 || echo "N/A")"
fi

echo ""
echo -e "${BLUE}üéØ INSTRUCTIONS DE TEST MANUEL${NC}"
echo "======================================================"

echo "  Pour tester le site g√©n√©r√©:"
echo -e "${YELLOW}     cd $OUTPUT_DIR${NC}"
echo -e "${YELLOW}     npm run dev${NC}"
echo ""
echo "  URLs √† tester:"
echo "     ‚Ä¢ http://localhost:5173/ (page d'accueil)"
echo "     ‚Ä¢ http://localhost:5173/blog (liste des articles)"

if [ $MARKDOWN_COUNT -gt 0 ]; then
    echo "     ‚Ä¢ Articles sp√©cifiques:"
    find content/blog -name "*.md" -exec grep "^slug:" {} \; | sed 's/slug: *//' | tr -d '"' | sed 's/^/       - http:\/\/localhost:5173\/blog\//'
fi

echo ""
echo -e "${BLUE}üìã CHECKLIST VALIDATION${NC}"
echo "======================================================"

echo "  Validation manuelle recommand√©e:"
echo "     ‚òê Page blog affiche 'Articles depuis Markdown'"
echo "     ‚òê Liste des articles compl√®te et tri√©e"
echo "     ‚òê Filtrage par cat√©gorie fonctionne"
echo "     ‚òê Recherche dans les articles"
echo "     ‚òê Navigation article individuel"
echo "     ‚òê Contenu HTML riche affich√© correctement"
echo "     ‚òê Images des articles (si pr√©sentes)"
echo "     ‚òê Responsive design mobile/desktop"

echo ""
echo -e "${GREEN}üéâ D√âMONSTRATION TERMIN√âE${NC}"
echo "======================================================"

if [ $MARKDOWN_COUNT -gt 0 ] && [ -d "$OUTPUT_DIR/dist" ]; then
    echo -e "${GREEN}‚úÖ Syst√®me Markdown v1.1.1.7 op√©rationnel !${NC}"
    echo ""
    echo "üìä R√©sum√©:"
    echo "  ‚Ä¢ Articles Markdown: $MARKDOWN_COUNT"
    echo "  ‚Ä¢ Articles copi√©s: $COPIED_COUNT"
    echo "  ‚Ä¢ Build de production: ‚úÖ"
    echo "  ‚Ä¢ Temps de g√©n√©ration: ${GENERATION_TIME}s"
    echo ""
    echo -e "${PURPLE}üöÄ Le syst√®me est pr√™t pour la production !${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Syst√®me partiellement fonctionnel${NC}"
    echo "V√©rifiez les erreurs ci-dessus"
fi

echo ""
echo -e "${BLUE}üìö RESSOURCES SUPPL√âMENTAIRES${NC}"
echo "  ‚Ä¢ Documentation: docs/markdown-blog.md"
echo "  ‚Ä¢ Test complet: ./scripts/test-markdown-v1117.sh"
echo "  ‚Ä¢ Exemples d'articles: content/blog/*.md"
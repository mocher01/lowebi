#!/usr/bin/env node

/**
 * üß™ Tests Automatis√©s de R√©gression
 * 
 * V√©rifie automatiquement les probl√®mes r√©currents:
 * 1. Logo cropping et affichage
 * 2. Images blog accessibles
 * 3. Formulaire de contact fonctionnel
 */

import fetch from 'node-fetch';
import fs from 'fs-extra';
import path from 'path';

class RegressionTester {
    constructor(baseUrl, siteName) {
        this.baseUrl = baseUrl;
        this.siteName = siteName;
        this.results = {
            logoTests: [],
            imageTests: [],
            contactFormTests: [],
            overallStatus: 'pending'
        };
    }

    async runAllTests() {
        console.log(`üß™ D√©marrage des tests automatis√©s pour ${this.siteName}`);
        console.log(`üåê URL de base: ${this.baseUrl}`);
        
        try {
            // Test 1: V√©rification des logos
            await this.testLogos();
            
            // Test 2: V√©rification des images blog
            await this.testBlogImages();
            
            // Test 3: V√©rification du formulaire de contact
            await this.testContactForm();
            
            // G√©n√©rer le rapport final
            this.generateReport();
            
        } catch (error) {
            console.error('‚ùå Erreur lors des tests:', error);
            this.results.overallStatus = 'error';
        }
    }

    async testLogos() {
        console.log('\nüìã Test 1: V√©rification des logos');
        
        try {
            // R√©cup√©rer la page d'accueil
            const response = await fetch(this.baseUrl);
            const html = await response.text();
            
            // Extraire la configuration du site
            const configMatch = html.match(/window\.SITE_CONFIG\s*=\s*({.*?});/s);
            if (!configMatch) {
                this.results.logoTests.push({
                    test: 'Configuration extraction',
                    status: 'failed',
                    message: 'Impossible d\'extraire la configuration du site'
                });
                return;
            }
            
            const siteConfig = JSON.parse(configMatch[1]);
            const logos = siteConfig.brand?.logos;
            
            if (!logos) {
                this.results.logoTests.push({
                    test: 'Logo configuration',
                    status: 'failed',
                    message: 'Configuration des logos manquante'
                });
                return;
            }
            
            // Test d'accessibilit√© des logos
            const logoTests = [
                { name: 'Navbar Logo', path: logos.navbar },
                { name: 'Footer Logo', path: logos.footer },
                { name: 'Default Logo', path: logos.default }
            ];
            
            for (const logoTest of logoTests) {
                const logoUrl = `${this.baseUrl}/assets/${logoTest.path}`;
                try {
                    const logoResponse = await fetch(logoUrl);
                    
                    this.results.logoTests.push({
                        test: logoTest.name,
                        status: logoResponse.ok ? 'passed' : 'failed',
                        message: logoResponse.ok ? 
                            `‚úÖ ${logoTest.path} accessible (${logoResponse.status})` :
                            `‚ùå ${logoTest.path} inaccessible (${logoResponse.status})`,
                        url: logoUrl
                    });
                } catch (error) {
                    this.results.logoTests.push({
                        test: logoTest.name,
                        status: 'failed',
                        message: `‚ùå Erreur lors du test: ${error.message}`,
                        url: logoUrl
                    });
                }
            }
            
            // V√©rifier la pr√©sence des logos dans le HTML
            const navbarLogoPresent = html.includes(logos.navbar);
            const footerLogoPresent = html.includes(logos.footer);
            
            this.results.logoTests.push({
                test: 'Logo dans HTML',
                status: (navbarLogoPresent && footerLogoPresent) ? 'passed' : 'failed',
                message: `Navbar: ${navbarLogoPresent}, Footer: ${footerLogoPresent}`
            });
            
        } catch (error) {
            this.results.logoTests.push({
                test: 'Test g√©n√©ral logos',
                status: 'error',
                message: error.message
            });
        }
    }

    async testBlogImages() {
        console.log('\nüìã Test 2: V√©rification des images blog');
        
        try {
            // R√©cup√©rer l'index du blog
            const blogIndexUrl = `${this.baseUrl}/content/blog-index.json`;
            const response = await fetch(blogIndexUrl);
            
            if (!response.ok) {
                this.results.imageTests.push({
                    test: 'Blog index',
                    status: 'failed',
                    message: `Index blog inaccessible: ${response.status}`
                });
                return;
            }
            
            const blogIndex = await response.json();
            const articles = blogIndex.articles || [];
            
            this.results.imageTests.push({
                test: 'Blog index',
                status: 'passed',
                message: `‚úÖ ${articles.length} articles trouv√©s`
            });
            
            // Test d'accessibilit√© des images des articles
            for (const article of articles.slice(0, 3)) { // Limiter √† 3 pour √©viter trop de requ√™tes
                if (article.image) {
                    const imageUrl = `${this.baseUrl}/assets/${article.image}`;
                    try {
                        const imageResponse = await fetch(imageUrl);
                        
                        this.results.imageTests.push({
                            test: `Image: ${article.title}`,
                            status: imageResponse.ok ? 'passed' : 'failed',
                            message: imageResponse.ok ? 
                                `‚úÖ ${article.image} accessible` :
                                `‚ùå ${article.image} inaccessible (${imageResponse.status})`,
                            url: imageUrl
                        });
                    } catch (error) {
                        this.results.imageTests.push({
                            test: `Image: ${article.title}`,
                            status: 'failed',
                            message: `‚ùå Erreur: ${error.message}`,
                            url: imageUrl
                        });
                    }
                }
            }
            
        } catch (error) {
            this.results.imageTests.push({
                test: 'Test g√©n√©ral images blog',
                status: 'error',
                message: error.message
            });
        }
    }

    async testContactForm() {
        console.log('\nüìã Test 3: V√©rification du formulaire de contact');
        
        try {
            // R√©cup√©rer la page de contact
            const contactUrl = `${this.baseUrl}/contact`;
            const response = await fetch(contactUrl);
            const html = await response.text();
            
            // V√©rifier la pr√©sence du formulaire
            const hasContactForm = html.includes('contact-form') || html.includes('form');
            const hasWebhookConfig = html.includes('webhook') || html.includes('n8n');
            
            this.results.contactFormTests.push({
                test: 'Page contact accessible',
                status: response.ok ? 'passed' : 'failed',
                message: response.ok ? '‚úÖ Page contact accessible' : `‚ùå Page contact inaccessible (${response.status})`
            });
            
            this.results.contactFormTests.push({
                test: 'Pr√©sence formulaire',
                status: hasContactForm ? 'passed' : 'failed',
                message: hasContactForm ? '‚úÖ Formulaire d√©tect√© dans HTML' : '‚ùå Formulaire non d√©tect√©'
            });
            
            // Extraire la configuration N8N du site
            const configMatch = html.match(/window\.SITE_CONFIG\s*=\s*({.*?});/s);
            if (configMatch) {
                const siteConfig = JSON.parse(configMatch[1]);
                const n8nConfig = siteConfig.integrations?.n8n;
                
                if (n8nConfig?.enabled) {
                    const webhookUrl = n8nConfig.workflows?.contactForm?.webhookUrl;
                    
                    this.results.contactFormTests.push({
                        test: 'Configuration N8N',
                        status: webhookUrl ? 'passed' : 'failed',
                        message: webhookUrl ? `‚úÖ Webhook configur√©: ${webhookUrl}` : '‚ùå Webhook manquant'
                    });
                    
                    // Test ping du webhook (simple HEAD request)
                    if (webhookUrl) {
                        try {
                            const webhookResponse = await fetch(webhookUrl, { method: 'HEAD' });
                            this.results.contactFormTests.push({
                                test: 'Webhook accessibility',
                                status: webhookResponse.ok ? 'passed' : 'warning',
                                message: webhookResponse.ok ? 
                                    '‚úÖ Webhook accessible' : 
                                    `‚ö†Ô∏è Webhook r√©pond ${webhookResponse.status} (normal pour HEAD)`
                            });
                        } catch (error) {
                            this.results.contactFormTests.push({
                                test: 'Webhook accessibility',
                                status: 'warning',
                                message: `‚ö†Ô∏è Test webhook impossible: ${error.message}`
                            });
                        }
                    }
                } else {
                    this.results.contactFormTests.push({
                        test: 'Configuration N8N',
                        status: 'failed',
                        message: '‚ùå N8N non activ√© dans la configuration'
                    });
                }
            }
            
        } catch (error) {
            this.results.contactFormTests.push({
                test: 'Test g√©n√©ral contact form',
                status: 'error',
                message: error.message
            });
        }
    }

    generateReport() {
        console.log('\nüìä RAPPORT DE TESTS AUTOMATIS√âS');
        console.log('=====================================');
        
        const allTests = [
            ...this.results.logoTests,
            ...this.results.imageTests,
            ...this.results.contactFormTests
        ];
        
        const passed = allTests.filter(t => t.status === 'passed').length;
        const failed = allTests.filter(t => t.status === 'failed').length;
        const warnings = allTests.filter(t => t.status === 'warning').length;
        const errors = allTests.filter(t => t.status === 'error').length;
        
        console.log(`üìà R√©sultats: ${passed} ‚úÖ | ${failed} ‚ùå | ${warnings} ‚ö†Ô∏è | ${errors} üí•`);
        
        // D√©tail par cat√©gorie
        this.printTestCategory('üé® TESTS LOGOS', this.results.logoTests);
        this.printTestCategory('üñºÔ∏è TESTS IMAGES BLOG', this.results.imageTests);
        this.printTestCategory('üìß TESTS FORMULAIRE CONTACT', this.results.contactFormTests);
        
        // Statut global
        if (failed > 0 || errors > 0) {
            this.results.overallStatus = 'failed';
            console.log('\n‚ùå TESTS √âCHOU√âS - Des r√©gressions sont pr√©sentes');
        } else if (warnings > 0) {
            this.results.overallStatus = 'warning';
            console.log('\n‚ö†Ô∏è TESTS AVEC AVERTISSEMENTS - V√©rification manuelle recommand√©e');
        } else {
            this.results.overallStatus = 'passed';
            console.log('\n‚úÖ TOUS LES TESTS R√âUSSIS - Aucune r√©gression d√©tect√©e');
        }
        
        // Sauvegarder le rapport
        this.saveReport();
    }

    printTestCategory(title, tests) {
        console.log(`\n${title}`);
        console.log('-'.repeat(title.length));
        
        for (const test of tests) {
            const status = {
                'passed': '‚úÖ',
                'failed': '‚ùå',
                'warning': '‚ö†Ô∏è',
                'error': 'üí•'
            }[test.status] || '‚ùì';
            
            console.log(`${status} ${test.test}: ${test.message}`);
            if (test.url) {
                console.log(`   URL: ${test.url}`);
            }
        }
    }

    async saveReport() {
        const reportPath = path.join(process.cwd(), 'test-results', `regression-test-${this.siteName}-${Date.now()}.json`);
        await fs.ensureDir(path.dirname(reportPath));
        
        const report = {
            siteName: this.siteName,
            baseUrl: this.baseUrl,
            timestamp: new Date().toISOString(),
            results: this.results
        };
        
        await fs.writeJSON(reportPath, report, { spaces: 2 });
        console.log(`\nüíæ Rapport sauvegard√©: ${reportPath}`);
    }
}

// CLI Usage
if (import.meta.url === `file://${process.argv[1]}`) {
    async function main() {
        const [,, baseUrl, siteName] = process.argv;
        
        if (!baseUrl || !siteName) {
            console.error('Usage: node automated-regression-tests.js <baseUrl> <siteName>');
            console.error('Exemple: node automated-regression-tests.js http://162.55.213.90:3001 translatepros');
            process.exit(1);
        }
        
        const tester = new RegressionTester(baseUrl, siteName);
        await tester.runAllTests();
        
        // Exit avec code d'erreur si tests √©chou√©s
        if (tester.results.overallStatus === 'failed') {
            process.exit(1);
        }
    }
    
    main().catch(console.error);
}

export { RegressionTester };
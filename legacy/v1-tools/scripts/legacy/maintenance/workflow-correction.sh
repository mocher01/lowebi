#!/bin/bash

# üîÑ WORKFLOW UNIVERSEL DE CORRECTION - Website Generator
# 
# Ce workflow permet de corriger et am√©liorer n'importe quel site g√©n√©r√©
# par le website-generator de mani√®re s√©curis√©e avec versioning.
#
# Usage: ./scripts/workflow-correction.sh <site-name> <version> "<description>"
#
# Exemples:
#   ./scripts/workflow-correction.sh qalyarab v1.2.1 "Correction navigation et boutons CTA"
#   ./scripts/workflow-correction.sh locod-ai v2.0.0 "Migration vers nouveau syst√®me de couleurs"
#   ./scripts/workflow-correction.sh mon-client v1.0.3 "Ajout section t√©moignages"

set -e

# Configuration
SITE_NAME="$1"
VERSION="$2"
PROBLEM_DESC="$3"
SCRIPT_VERSION="2.0.0"

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Fonctions utilitaires
log_header() {
    echo -e "${BLUE}$1${NC}"
    echo "============================================="
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_info() {
    echo -e "${PURPLE}üìã $1${NC}"
}

# Validation des param√®tres
if [ -z "$SITE_NAME" ] || [ -z "$VERSION" ] || [ -z "$PROBLEM_DESC" ]; then
    log_error "Usage: $0 <site-name> <version> \"<description>\""
    echo ""
    echo -e "${YELLOW}üìö Exemples d'utilisation:${NC}"
    echo "  ‚Ä¢ Correction mineure:     $0 qalyarab v1.0.1 \"Fix bouton contact\""
    echo "  ‚Ä¢ Nouvelle fonctionnalit√©: $0 locod-ai v1.1.0 \"Ajout section blog\""
    echo "  ‚Ä¢ Changement majeur:      $0 mon-client v2.0.0 \"Refonte compl√®te UI\""
    echo ""
    echo -e "${YELLOW}üí° Sites disponibles:${NC}"
    if [ -d "configs" ]; then
        ls configs/ | grep -v "^\\." | while read site; do
            if [ -f "configs/$site/site-config.json" ]; then
                echo "  ‚Ä¢ $site"
            fi
        done
    fi
    echo ""
    echo -e "${YELLOW}üìñ Versioning s√©mantique:${NC}"
    echo "  ‚Ä¢ vX.Y.Z o√π X=major, Y=minor, Z=patch"
    echo "  ‚Ä¢ Patch (v1.0.1): Corrections de bugs"
    echo "  ‚Ä¢ Minor (v1.1.0): Nouvelles fonctionnalit√©s"
    echo "  ‚Ä¢ Major (v2.0.0): Changements incompatibles"
    exit 1
fi

# Validation du format de version
if ! echo "$VERSION" | grep -qE "^v[0-9]+\.[0-9]+\.[0-9]+$"; then
    log_error "Format de version invalide: $VERSION"
    echo -e "${YELLOW}üí° Format attendu: vX.Y.Z (exemple: v1.0.1)${NC}"
    exit 1
fi

# V√©rifier que le site existe
if [ ! -d "configs/$SITE_NAME" ]; then
    log_error "Site '$SITE_NAME' non trouv√© dans configs/"
    echo -e "${YELLOW}üí° Sites disponibles:${NC}"
    ls configs/ | grep -v "^\\." | while read site; do
        if [ -f "configs/$site/site-config.json" ]; then
            echo "  ‚Ä¢ $site"
        fi
    done
    exit 1
fi

# Header du workflow
echo -e "${BLUE}üîÑ WEBSITE GENERATOR - WORKFLOW CORRECTION UNIVERSEL${NC}"
echo -e "${PURPLE}Version du script: $SCRIPT_VERSION${NC}"
echo "============================================="
echo -e "${YELLOW}üéØ Site cible:${NC} $SITE_NAME"
echo -e "${YELLOW}üì¶ Version:${NC} $VERSION"
echo -e "${YELLOW}üìã Description:${NC} $PROBLEM_DESC"
echo -e "${YELLOW}üåê G√©n√©rateur:${NC} Website Generator (template universel)"
echo ""

# √âTAPE 0: V√©rification de l'environnement
log_header "üîç √âTAPE 0: V√©rification de l'environnement"

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "scripts/generate-site.sh" ]; then
    log_error "Script doit √™tre ex√©cut√© depuis la racine du website-generator"
    exit 1
fi

# V√©rifier Git
if [ ! -d ".git" ]; then
    log_error "Pas dans un repository Git"
    exit 1
fi

# V√©rifier les outils requis
for tool in node docker python3; do
    if ! command -v $tool &> /dev/null; then
        log_error "Outil requis manquant: $tool"
        exit 1
    fi
done

log_success "Environnement valid√©"

# V√©rifier l'√©tat du working directory
if [ -n "$(git status --porcelain)" ]; then
    log_warning "Working directory not clean"
    echo "Fichiers modifi√©s:"
    git status --porcelain
    echo ""
    echo -e "${YELLOW}Voulez-vous continuer ? (y/N)${NC}"
    read -p "" -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_error "Annul√© par l'utilisateur"
        exit 1
    fi
fi

# R√©cup√©rer la branche actuelle
CURRENT_BRANCH=$(git branch --show-current)
log_success "Branche actuelle: $CURRENT_BRANCH"

# √âTAPE 1: Gestion des branches et versioning
log_header "üåø √âTAPE 1: Gestion des branches et versioning"

# G√©n√©rer les noms de branches avec versioning
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_BRANCH="backup/${SITE_NAME}_${VERSION}_${TIMESTAMP}"
FIX_BRANCH="fix/${SITE_NAME}_${VERSION}_${TIMESTAMP}"
RELEASE_TAG="${SITE_NAME}_${VERSION}"

# Cr√©er la branche de sauvegarde
echo "Cr√©ation de la branche de sauvegarde: $BACKUP_BRANCH"
git checkout -b "$BACKUP_BRANCH"

# Commiter l'√©tat actuel si n√©cessaire
if [ -n "$(git status --porcelain)" ]; then
    echo "Commit de l'√©tat actuel dans la branche de sauvegarde..."
    git add .
    git commit -m "üíæ BACKUP: $SITE_NAME ${VERSION} - √âtat avant correction

üìã Description: $PROBLEM_DESC
üéØ Site: $SITE_NAME
üì¶ Version: $VERSION
üåê G√©n√©rateur: Website Generator
‚è∞ Timestamp: $TIMESTAMP"
fi

log_success "Branche de sauvegarde cr√©√©e: $BACKUP_BRANCH"

# Cr√©er la branche de correction
echo "Cr√©ation de la branche de correction: $FIX_BRANCH"
git checkout -b "$FIX_BRANCH"

log_success "Branche de correction cr√©√©e: $FIX_BRANCH"

# √âTAPE 2: Backup local et documentation
log_header "üì¶ √âTAPE 2: Backup local et documentation"

# Cr√©er le dossier de backup avec versioning
BACKUP_DIR="backups/${SITE_NAME}/${VERSION}_${TIMESTAMP}"
mkdir -p "$BACKUP_DIR"

# Backup de la configuration du site
if [ -f "configs/$SITE_NAME/site-config.json" ]; then
    cp "configs/$SITE_NAME/site-config.json" "$BACKUP_DIR/site-config.json.bak"
    log_success "Configuration $SITE_NAME sauvegard√©e"
fi

# Backup des assets du site
if [ -d "configs/$SITE_NAME/assets" ]; then
    cp -r "configs/$SITE_NAME/assets" "$BACKUP_DIR/assets.bak"
    log_success "Assets $SITE_NAME sauvegard√©s"
fi

# Cr√©er un fichier de documentation de la correction
cat > "$BACKUP_DIR/correction-info.md" << EOF
# Correction Website Generator

## Informations g√©n√©rales
- **Site**: $SITE_NAME
- **Version**: $VERSION
- **Description**: $PROBLEM_DESC
- **Date**: $(date)
- **Branche backup**: $BACKUP_BRANCH
- **Branche correction**: $FIX_BRANCH

## Contexte
Le Website Generator permet de g√©n√©rer automatiquement des sites web 
personnalis√©s √† partir d'un template React/Vite unique.

## Sites support√©s
$(ls configs/ | grep -v "^\\." | while read site; do
    if [ -f "configs/$site/site-config.json" ]; then
        echo "- $site"
    fi
done)

## Fichiers sauvegard√©s
- Configuration: site-config.json.bak
- Assets: assets.bak/
- Template: (r√©f√©rence Git: $BACKUP_BRANCH)

## Commandes de r√©cup√©ration
\`\`\`bash
# Retour √† l'√©tat de sauvegarde
git checkout $BACKUP_BRANCH

# Restauration des fichiers
cp $BACKUP_DIR/site-config.json.bak configs/$SITE_NAME/site-config.json
cp -r $BACKUP_DIR/assets.bak/* configs/$SITE_NAME/assets/
\`\`\`
EOF

log_success "Documentation cr√©√©e: $BACKUP_DIR/correction-info.md"

# √âTAPE 3: Nettoyage de l'environnement
log_header "üßπ √âTAPE 3: Nettoyage de l'environnement"

# Arr√™ter tous les containers du site
echo "Arr√™t des containers $SITE_NAME..."
docker stop ${SITE_NAME}-container ${SITE_NAME} ${SITE_NAME}-test ${SITE_NAME}-dev 2>/dev/null || true
docker rm ${SITE_NAME}-container ${SITE_NAME} ${SITE_NAME}-test ${SITE_NAME}-dev 2>/dev/null || true

# Nettoyer les images si demand√©
if [ "$4" = "--clean-images" ]; then
    echo "Nettoyage des images $SITE_NAME..."
    docker rmi ${SITE_NAME}-website ${SITE_NAME}-site 2>/dev/null || true
fi

# Nettoyer les sites g√©n√©r√©s pr√©c√©dents
if [ -d "generated-sites/$SITE_NAME" ]; then
    echo "Nettoyage des sites g√©n√©r√©s pr√©c√©dents..."
    rm -rf "generated-sites/$SITE_NAME"
fi

log_success "Environnement nettoy√©"

# √âTAPE 4: Validation pr√©-correction
log_header "üîç √âTAPE 4: Validation pr√©-correction"

log_info "Validation de la configuration $SITE_NAME..."
if node scripts/validate-config.js "$SITE_NAME"; then
    log_success "Configuration $SITE_NAME valide"
else
    log_warning "Configuration $SITE_NAME invalide - corrections n√©cessaires"
fi

# V√©rifier les assets
log_info "V√©rification des assets..."
if [ -d "configs/$SITE_NAME/assets" ]; then
    ASSET_COUNT=$(find "configs/$SITE_NAME/assets" -type f | wc -l)
    log_success "Assets trouv√©s: $ASSET_COUNT fichiers"
else
    log_warning "Aucun asset trouv√© pour $SITE_NAME"
fi

# √âTAPE 5: Instructions pour les corrections
log_header "‚úèÔ∏è √âTAPE 5: Effectuer les corrections"

echo -e "${YELLOW}üìù Vous √™tes maintenant dans la branche de correction: $FIX_BRANCH${NC}"
echo ""
echo -e "${YELLOW}üéØ Corrections possibles pour le site '$SITE_NAME':${NC}"
echo ""
echo "  üìÅ Configuration du site:"
echo "     nano configs/$SITE_NAME/site-config.json"
echo ""
echo "  üé® Assets du site:"
echo "     configs/$SITE_NAME/assets/"
echo ""
echo "  üß© Template universel (affecte TOUS les sites):"
echo "     template-base/src/components/"
echo "     template-base/src/utils/"
echo ""
echo -e "${YELLOW}üí° Autres sites dans ce g√©n√©rateur:${NC}"
ls configs/ | grep -v "^\\." | while read site; do
    if [ -f "configs/$site/site-config.json" ] && [ "$site" != "$SITE_NAME" ]; then
        echo "  ‚Ä¢ $site (sera aussi affect√© par les changements de template)"
    fi
done
echo ""
echo -e "${YELLOW}üîÑ Commandes Git utiles:${NC}"
echo "  ‚Ä¢ Voir les modifications: git status"
echo "  ‚Ä¢ Commiter au fur et √† mesure: git add . && git commit -m 'Description'"
echo "  ‚Ä¢ Revenir au backup: git checkout $BACKUP_BRANCH"
echo ""
echo -e "${YELLOW}üß™ Test rapide pendant correction:${NC}"
echo "  ./scripts/generate-site.sh $SITE_NAME --build"
echo "  cd generated-sites/$SITE_NAME && npm run dev"
echo ""
echo -e "${YELLOW}‚è≥ Appuyez sur ENTR√âE quand les corrections sont termin√©es...${NC}"
read -p ""

# √âTAPE 6: Validation post-correction
log_header "üõ°Ô∏è √âTAPE 6: Validation post-correction"

log_info "Validation de la configuration corrig√©e..."
if ! node scripts/validate-config.js "$SITE_NAME"; then
    log_error "Validation √©chou√©e apr√®s corrections"
    echo -e "${YELLOW}üí° Corrigez les erreurs et relancez le script${NC}"
    exit 1
fi

log_success "Configuration $SITE_NAME valid√©e"

# √âTAPE 7: G√©n√©ration et tests
log_header "üî® √âTAPE 7: G√©n√©ration et tests"

log_info "G√©n√©ration du site $SITE_NAME avec le template universel..."
if ./scripts/generate-site.sh "$SITE_NAME" --build --docker; then
    log_success "Site $SITE_NAME g√©n√©r√© avec succ√®s"
else
    log_error "√âchec de la g√©n√©ration du site $SITE_NAME"
    exit 1
fi

# √âTAPE 8: D√©ploiement de test
log_header "üöÄ √âTAPE 8: D√©ploiement de test"

log_info "D√©marrage du container de test pour $SITE_NAME..."
docker run -d \
    --name "${SITE_NAME}" \
    -p 3000:80 \
    "${SITE_NAME}-website"

sleep 5

# V√©rifier que le container tourne
if docker ps | grep -q "${SITE_NAME}"; then
    log_success "Container $SITE_NAME d√©marr√©"
else
    log_error "√âchec du d√©marrage du container $SITE_NAME"
    echo "Logs du container:"
    docker logs "${SITE_NAME}"
    exit 1
fi

# √âTAPE 9: Tests automatiques
log_header "üß™ √âTAPE 9: Tests automatiques"

log_info "Test HTTP du site $SITE_NAME..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "000")
if [ "$HTTP_STATUS" = "200" ]; then
    log_success "Test HTTP r√©ussi (Status: $HTTP_STATUS)"
else
    log_error "Test HTTP √©chou√© (Status: $HTTP_STATUS)"
    exit 1
fi

log_info "Test des assets..."
curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/assets/ > /dev/null
log_success "Assets accessibles"

# √âTAPE 10: Commit et versioning
log_header "üíæ √âTAPE 10: Commit et versioning"

# V√©rifier s'il y a des modifications
if [ -n "$(git status --porcelain)" ]; then
    log_info "Commit des corrections..."
    git add .
    git commit -m "üîß $SITE_NAME $VERSION: $PROBLEM_DESC

‚ú® Corrections appliqu√©es sur le site $SITE_NAME
üéØ Version: $VERSION
üß™ Tests automatiques: ‚úÖ R√©ussis
üöÄ D√©ploiement: ‚úÖ Fonctionnel
üåê G√©n√©rateur: Website Generator (template universel)

üìã D√©tails:
- Site concern√©: $SITE_NAME
- Template universel: template-base/
- Configuration: configs/$SITE_NAME/
- Assets: configs/$SITE_NAME/assets/

üåø Branches:
- Backup: $BACKUP_BRANCH
- Fix: $FIX_BRANCH
- Release: $RELEASE_TAG

üîÑ Impact sur autres sites:
$(ls configs/ | grep -v "^\\." | while read site; do
    if [ -f "configs/$site/site-config.json" ] && [ "$site" != "$SITE_NAME" ]; then
        echo "- $site (affect√© par changements template)"
    fi
done)"
    
    log_success "Corrections commit√©es"
    
    # Cr√©er un tag de release
    if git tag -a "$RELEASE_TAG" -m "Release $SITE_NAME $VERSION: $PROBLEM_DESC"; then
        log_success "Tag de release cr√©√©: $RELEASE_TAG"
    fi
else
    log_warning "Aucune modification √† commiter"
fi

# √âTAPE 11: R√©sum√© final
log_header "üìã √âTAPE 11: R√©sum√© final"

echo -e "${GREEN}üéâ WORKFLOW WEBSITE GENERATOR TERMIN√â AVEC SUCC√àS${NC}"
echo ""
echo -e "${YELLOW}üìä R√©sum√© de la correction:${NC}"
echo "  ‚Ä¢ üéØ Site trait√©: $SITE_NAME"
echo "  ‚Ä¢ üì¶ Version: $VERSION"
echo "  ‚Ä¢ üìã Description: $PROBLEM_DESC"
echo "  ‚Ä¢ üåê G√©n√©rateur: Website Generator (template universel)"
echo "  ‚Ä¢ üåø Branche backup: $BACKUP_BRANCH"
echo "  ‚Ä¢ üåø Branche correction: $FIX_BRANCH"
echo "  ‚Ä¢ üè∑Ô∏è Tag release: $RELEASE_TAG"
echo "  ‚Ä¢ üìÅ Backup local: $BACKUP_DIR"
echo "  ‚Ä¢ üê≥ Container: $SITE_NAME (port 3000)"
echo "  ‚Ä¢ ‚úÖ Status: Op√©rationnel"
echo ""
echo -e "${YELLOW}üîó Acc√®s au site $SITE_NAME:${NC}"
echo "  ‚Ä¢ üè† Local: http://localhost:3000"
echo "  ‚Ä¢ üåê Serveur: http://YOUR_SERVER_IP:3000"
echo ""
echo -e "${YELLOW}üåø Gestion des branches:${NC}"
echo "  ‚Ä¢ üìç Branche actuelle: $FIX_BRANCH"
echo "  ‚Ä¢ üîÑ Retour backup: git checkout $BACKUP_BRANCH"
echo "  ‚Ä¢ üè† Retour main: git checkout main"
echo "  ‚Ä¢ üîÄ Merger corrections: git checkout main && git merge $FIX_BRANCH"
echo ""
echo -e "${YELLOW}üåê Impact sur le g√©n√©rateur:${NC}"
echo "  ‚Ä¢ üéØ Site principal trait√©: $SITE_NAME"
echo "  ‚Ä¢ üß© Template universel: Peut affecter tous les sites"
echo "  ‚Ä¢ üìÅ Autres sites disponibles:"
ls configs/ | grep -v "^\\." | while read site; do
    if [ -f "configs/$site/site-config.json" ] && [ "$site" != "$SITE_NAME" ]; then
        echo "    - $site (reg√©n√©rer si template modifi√©)"
    fi
done
echo ""
echo -e "${YELLOW}üß™ Tests recommand√©s:${NC}"
echo "  1. ‚úÖ V√©rifier que le probl√®me est corrig√© sur $SITE_NAME"
echo "  2. üîÑ Tester la navigation et fonctionnalit√©s"
echo "  3. üì± V√©rifier l'affichage mobile"
echo "  4. üåê Si template modifi√©: reg√©n√©rer les autres sites"
echo ""
echo -e "${YELLOW}‚è≠Ô∏è Prochaines √©tapes:${NC}"
echo "  ‚Ä¢ ‚úÖ Si $SITE_NAME fonctionne: git checkout main && git merge $FIX_BRANCH"
echo "  ‚Ä¢ üîÑ Si template modifi√©: reg√©n√©rer les autres sites"
echo "  ‚Ä¢ üì§ Push: git push origin $FIX_BRANCH"
echo "  ‚Ä¢ üè∑Ô∏è Release: git push origin $RELEASE_TAG"
echo "  ‚Ä¢ üö® Si probl√®me: git checkout $BACKUP_BRANCH"
echo ""
echo -e "${YELLOW}üîÑ Commandes Docker utiles:${NC}"
echo "  ‚Ä¢ üìã Logs: docker logs $SITE_NAME"
echo "  ‚Ä¢ üîÑ Red√©marrer: docker restart $SITE_NAME"
echo "  ‚Ä¢ üõë Arr√™ter: docker stop $SITE_NAME"
echo ""
echo -e "${BLUE}‚úÖ Website Generator - Correction $SITE_NAME $VERSION termin√©e !${NC}"
echo -e "${PURPLE}üåê G√©n√©rateur pr√™t pour traiter d'autres sites si n√©cessaire.${NC}"

#!/bin/bash

# Portal v2.0 Backend Deployment Fix Script
# Diagnoses and fixes database connectivity issues

set -e

echo "üöÄ Portal v2.0 Backend Deployment Fix"
echo "====================================="

# Configuration
BACKEND_DIR="/var/apps/website-generator/v2/backend"
SERVICE_NAME="portal-v2-backend"
BACKEND_PORT=7600
FRONTEND_PORT=7601

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if port is in use
port_in_use() {
    netstat -tulpn 2>/dev/null | grep ":$1 " >/dev/null
}

# Function to check PostgreSQL connectivity
test_postgres_connection() {
    local host=$1
    local port=$2
    local user=$3
    local password=$4
    local database=$5
    
    log_info "Testing PostgreSQL connection: $user@$host:$port/$database"
    
    if [ -z "$password" ]; then
        PGPASSWORD="" psql -h "$host" -p "$port" -U "$user" -d "$database" -c "SELECT version();" >/dev/null 2>&1
    else
        PGPASSWORD="$password" psql -h "$host" -p "$port" -U "$user" -d "$database" -c "SELECT version();" >/dev/null 2>&1
    fi
}

# Function to discover working database configuration
discover_database_config() {
    log_info "Discovering working database configuration..."
    
    # Test configurations
    local configs=(
        "127.0.0.1:5433:postgres::postgres"
        "127.0.0.1:5433:locod_user:locod_pass_2024:locod_db"
        "127.0.0.1:5433:locod_user:locod_pass_2024:locod_prod"
        "127.0.0.1:5432:postgres::postgres"
        "127.0.0.1:5432:locod_user:locod_pass_2024:locod_prod"
        "localhost:5433:postgres::postgres"
        "localhost:5432:postgres::postgres"
    )
    
    for config in "${configs[@]}"; do
        IFS=':' read -r host port user password database <<< "$config"
        
        if test_postgres_connection "$host" "$port" "$user" "$password" "$database"; then
            log_success "Working configuration found: $user@$host:$port/$database"
            echo "$host:$port:$user:$password:$database"
            return 0
        fi
    done
    
    log_error "No working database configuration found"
    return 1
}

# Function to create .env file
create_env_file() {
    local db_config=$1
    IFS=':' read -r host port user password database <<< "$db_config"
    
    log_info "Creating .env file with working database configuration"
    
    cat > "$BACKEND_DIR/.env" << EOF
# Portal v2.0 Backend Production Configuration
# Auto-generated by deployment fix script

# Database Configuration
DATABASE_HOST=$host
DATABASE_PORT=$port
DATABASE_USERNAME=$user
DATABASE_PASSWORD=$password
DATABASE_NAME=$database

# JWT Configuration
JWT_SECRET=portal-v2-production-jwt-secret-$(date +%s)
JWT_EXPIRES_IN=24h
JWT_EXPIRATION=15m
REFRESH_TOKEN_SECRET=portal-v2-refresh-secret-$(date +%s)
REFRESH_TOKEN_EXPIRATION=7d

# Security Configuration
BCRYPT_ROUNDS=10

# Application Configuration
NODE_ENV=production
PORT=$BACKEND_PORT

# CORS Configuration
NEXT_PUBLIC_API_URL=http://162.55.213.90:$BACKEND_PORT

# Monitoring
LOG_LEVEL=info
ENABLE_REQUEST_LOGGING=true
ENABLE_HEALTH_CHECKS=true
ENABLE_SWAGGER=true
EOF

    log_success ".env file created successfully"
}

# Function to stop existing service
stop_service() {
    log_info "Stopping existing backend service..."
    
    # Try to stop systemd service
    if systemctl is-active --quiet "$SERVICE_NAME" 2>/dev/null; then
        sudo systemctl stop "$SERVICE_NAME"
        log_success "Systemd service stopped"
    fi
    
    # Kill any processes on the backend port
    if port_in_use $BACKEND_PORT; then
        log_warning "Port $BACKEND_PORT is still in use, killing processes..."
        sudo fuser -k $BACKEND_PORT/tcp 2>/dev/null || true
        sleep 2
    fi
}

# Function to install dependencies
install_dependencies() {
    log_info "Installing/updating dependencies..."
    cd "$BACKEND_DIR"
    
    if [ -f "package.json" ]; then
        npm install --production
        log_success "Dependencies installed"
    else
        log_error "package.json not found in $BACKEND_DIR"
        return 1
    fi
}

# Function to build application
build_application() {
    log_info "Building application..."
    cd "$BACKEND_DIR"
    
    npm run build
    if [ $? -eq 0 ]; then
        log_success "Application built successfully"
    else
        log_error "Build failed"
        return 1
    fi
}

# Function to start backend service
start_backend() {
    log_info "Starting backend service..."
    cd "$BACKEND_DIR"
    
    # Try to start as systemd service first
    if [ -f "/etc/systemd/system/$SERVICE_NAME.service" ]; then
        sudo systemctl start "$SERVICE_NAME"
        sudo systemctl enable "$SERVICE_NAME"
        
        sleep 5
        
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            log_success "Backend service started via systemd"
            return 0
        else
            log_warning "Systemd service failed, trying direct npm start..."
        fi
    fi
    
    # Fallback: start directly with npm
    log_info "Starting backend with npm..."
    nohup npm run start:prod > backend.log 2>&1 &
    local pid=$!
    
    sleep 5
    
    if kill -0 $pid 2>/dev/null; then
        log_success "Backend started with PID: $pid"
        echo $pid > backend.pid
    else
        log_error "Failed to start backend"
        return 1
    fi
}

# Function to verify deployment
verify_deployment() {
    log_info "Verifying deployment..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log_info "Attempt $attempt/$max_attempts: Testing health endpoint..."
        
        if curl -f -s "http://127.0.0.1:$BACKEND_PORT/api/health" >/dev/null 2>&1; then
            log_success "Health endpoint responding"
            break
        fi
        
        sleep 2
        ((attempt++))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_error "Health endpoint not responding after $max_attempts attempts"
        return 1
    fi
    
    # Test other endpoints
    local endpoints=(
        "/"
        "/api/docs"
        "/api/metrics"
    )
    
    for endpoint in "${endpoints[@]}"; do
        if curl -f -s "http://127.0.0.1:$BACKEND_PORT$endpoint" >/dev/null 2>&1; then
            log_success "Endpoint $endpoint: OK"
        else
            log_warning "Endpoint $endpoint: Failed"
        fi
    done
}

# Function to show final status
show_final_status() {
    echo ""
    echo "üéØ DEPLOYMENT STATUS SUMMARY"
    echo "============================"
    
    if curl -f -s "http://127.0.0.1:$BACKEND_PORT/api/health" >/dev/null 2>&1; then
        log_success "Portal v2.0 Backend is OPERATIONAL"
        echo ""
        echo "üìã Service Information:"
        echo "  üåê Backend URL: http://162.55.213.90:$BACKEND_PORT"
        echo "  üìö API Docs: http://162.55.213.90:$BACKEND_PORT/api/docs"
        echo "  üè• Health Check: http://162.55.213.90:$BACKEND_PORT/api/health"
        echo "  üìä Metrics: http://162.55.213.90:$BACKEND_PORT/api/metrics"
        echo "  üé® Frontend: http://162.55.213.90:$FRONTEND_PORT"
        echo ""
        echo "‚úÖ Ready for QA testing and production use!"
    else
        log_error "Deployment failed - backend not responding"
        echo ""
        echo "üîß Troubleshooting:"
        echo "  üìÑ Check logs: tail -f $BACKEND_DIR/backend.log"
        echo "  üîç Check service: systemctl status $SERVICE_NAME"
        echo "  üîå Check port: netstat -tulpn | grep $BACKEND_PORT"
        echo "  üóÑÔ∏è Check database: Run database diagnostic script"
        return 1
    fi
}

# Main execution
main() {
    log_info "Starting Portal v2.0 backend deployment fix..."
    
    # Check prerequisites
    if ! command_exists node; then
        log_error "Node.js not found. Please install Node.js"
        exit 1
    fi
    
    if ! command_exists npm; then
        log_error "npm not found. Please install npm"
        exit 1
    fi
    
    if ! command_exists psql; then
        log_error "PostgreSQL client not found. Please install postgresql-client"
        exit 1
    fi
    
    # Check backend directory
    if [ ! -d "$BACKEND_DIR" ]; then
        log_error "Backend directory not found: $BACKEND_DIR"
        exit 1
    fi
    
    # Discover database configuration
    local db_config
    if ! db_config=$(discover_database_config); then
        log_error "Could not establish database connection"
        echo ""
        echo "üîß Manual database setup required:"
        echo "1. Start PostgreSQL containers:"
        echo "   docker start v2test-postgres"
        echo "   docker start n8n-prod-postgres"
        echo "2. Check container status:"
        echo "   docker ps | grep postgres"
        echo "3. Re-run this script"
        exit 1
    fi
    
    # Stop existing service
    stop_service
    
    # Create environment configuration
    create_env_file "$db_config"
    
    # Install dependencies
    if ! install_dependencies; then
        exit 1
    fi
    
    # Build application
    if ! build_application; then
        exit 1
    fi
    
    # Start backend
    if ! start_backend; then
        exit 1
    fi
    
    # Verify deployment
    if ! verify_deployment; then
        exit 1
    fi
    
    # Show final status
    show_final_status
}

# Run main function
main "$@"
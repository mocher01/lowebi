/**
 * Loader de configuration pour le template
 * Charge la configuration inject√©e dynamiquement
 */

import { applyAutoNavbarColors } from '../utils/colorUtils.js';

let siteConfig = null;

/**
 * Charge la configuration du site de mani√®re synchrone
 * @returns {Object} Configuration compl√®te du site
 */
export const loadSiteConfig = () => {
  try {
    // 1. TOUJOURS v√©rifier d'abord la config inject√©e dans window.SITE_CONFIG
    // Cela permet de d√©tecter les mises √† jour de configuration
    if (typeof window !== 'undefined' && window.SITE_CONFIG) {
      siteConfig = processConfig(window.SITE_CONFIG);
      return siteConfig;
    }

    // 2. Si pas de config inject√©e, utiliser le cache s'il existe
    if (siteConfig) {
      return siteConfig;
    }

    // 3. Sinon essayer localStorage (pour les mises √† jour dynamiques)
    const localConfig = localStorage.getItem('siteConfig');
    if (localConfig) {
      siteConfig = processConfig(JSON.parse(localConfig));
      return siteConfig;
    }

    // 4. En dernier recours, charger depuis /config.json
    loadConfigAsync();
    return processConfig(getFallbackConfig());
  } catch (error) {
    console.warn('Site configuration not found, using fallback:', error);
    return processConfig(getFallbackConfig());
  }
};

/**
 * Traite la configuration pour appliquer les am√©liorations automatiques
 * @param {Object} config - Configuration brute
 * @returns {Object} Configuration trait√©e
 */
const processConfig = (config) => {
  // üé® NOUVEAUT√â : Application automatique des couleurs navbar
  if (!config.navbar?._autoGenerated) {
    config = applyAutoNavbarColors(config);
  }
  
  return config;
};

/**
 * Charge la configuration depuis /config.json de mani√®re asynchrone
 */
const loadConfigAsync = async () => {
  if (siteConfig) return siteConfig;

  try {
    const response = await fetch('/config.json');
    if (response.ok) {
      const config = await response.json();
      siteConfig = processConfig(config);
      // Sauvegarder pour les acc√®s futurs
      localStorage.setItem('siteConfig', JSON.stringify(siteConfig));
      
      // Forcer un re-render en √©mettant un √©v√©nement
      window.dispatchEvent(new CustomEvent('configLoaded', { detail: siteConfig }));
      
      return siteConfig;
    }
  } catch (error) {
    console.warn('Failed to load config.json:', error);
  }
  
  return processConfig(getFallbackConfig());
};

/**
 * Force le rechargement de la configuration
 * Utile pour le d√©veloppement et les mises √† jour
 */
export const reloadSiteConfig = () => {
  siteConfig = null;
  localStorage.removeItem('siteConfig');
  return loadSiteConfig();
};

/**
 * Configuration de fallback (d√©faut Locod.AI)
 * Utilis√©e si aucune config n'est inject√©e
 */
const getFallbackConfig = () => {
  return {
    meta: {
      siteId: 'fallback',
      domain: 'localhost:3000',
      language: 'fr'
    },
    brand: {
      name: 'Locod.AI',
      slogan: 'Automatisez! Vite. Bien. Sans coder.',
      logo: 'logo-locodai.png',
      colors: {
        primary: '#3B82F6',
        secondary: '#8B5CF6',
        accent: '#06B6D4'
      }
    },
    content: {
      hero: {
        title: 'Template de d√©veloppement',
        subtitle: 'Configuration requise',
        description: 'Veuillez injecter une configuration pour voir le site personnalis√©.',
        cta: {
          primary: 'Configuration requise',
          secondary: 'Nous contacter'
        }
      },
      services: [
        {
          title: "Service exemple",
          description: "Configuration non charg√©e",
          icon: "default"
        }
      ],
      about: {
        title: 'Mode d√©veloppement',
        description: 'Veuillez injecter une configuration pour voir le site personnalis√©.'
      }
    },
    contact: {
      email: 'dev@template.local',
      phone: '+33 X XX XX XX XX',
      address: {
        city: 'Ville',
        country: 'Pays'
      }
    },
    features: {
      blog: false,
      testimonials: false,
      faq: false,
      newsletter: false,
      darkMode: true
    }
  };
};

/**
 * Utilitaire pour obtenir une couleur du th√®me
 * @param {string} colorKey - Cl√© de la couleur (primary, secondary, accent)
 * @returns {string} Couleur hexad√©cimale
 */
export const getThemeColor = (colorKey) => {
  const config = loadSiteConfig();
  return config.brand?.colors?.[colorKey] || '#3B82F6';
};

/**
 * V√©rifie si une fonctionnalit√© est activ√©e
 * @param {string} featureKey - Cl√© de la fonctionnalit√©
 * @returns {boolean}
 */
export const isFeatureEnabled = (featureKey) => {
  const config = loadSiteConfig();
  return config.features?.[featureKey] === true;
};

// Debug info
if (typeof window !== 'undefined') {
  console.log('üîß Config loader initialized');
  if (window.SITE_CONFIG) {
    console.log('‚úÖ Inline config found:', window.SITE_CONFIG.brand?.name);
  } else {
    console.log('‚ö†Ô∏è No inline config, will try async loading');
  }
}

export default loadSiteConfig;
@echo off
setlocal enabledelayedexpansion

REM Portal v2.0 Backend Deployment Fix Script (Windows)
REM Diagnoses and fixes database connectivity issues

echo 🚀 Portal v2.0 Backend Deployment Fix (Windows)
echo =============================================

set BACKEND_DIR=%~dp0
set BACKEND_PORT=7600
set FRONTEND_PORT=7601

echo ℹ️  Backend Directory: %BACKEND_DIR%
echo ℹ️  Backend Port: %BACKEND_PORT%
echo ℹ️  Frontend Port: %FRONTEND_PORT%

REM Check if Node.js is installed
node --version >nul 2>&1
if errorlevel 1 (
    echo ❌ Node.js not found. Please install Node.js
    pause
    exit /b 1
)

REM Check if npm is installed
npm --version >nul 2>&1
if errorlevel 1 (
    echo ❌ npm not found. Please install npm
    pause
    exit /b 1
)

echo ✅ Node.js and npm found

REM Change to backend directory
cd /d "%BACKEND_DIR%"

REM Check if package.json exists
if not exist "package.json" (
    echo ❌ package.json not found in %BACKEND_DIR%
    pause
    exit /b 1
)

echo ✅ package.json found

REM Kill any existing processes on the backend port
echo ℹ️  Checking for existing processes on port %BACKEND_PORT%...
for /f "tokens=5" %%a in ('netstat -aon ^| findstr ":%BACKEND_PORT%"') do (
    echo ⚠️  Killing process %%a on port %BACKEND_PORT%
    taskkill /PID %%a /F >nul 2>&1
)

REM Create .env file with database configuration
echo ℹ️  Creating .env file...
(
echo # Portal v2.0 Backend Development Configuration
echo # Auto-generated by deployment fix script
echo.
echo # Database Configuration
echo DATABASE_HOST=localhost
echo DATABASE_PORT=5433
echo DATABASE_USERNAME=postgres
echo DATABASE_PASSWORD=
echo DATABASE_NAME=postgres
echo.
echo # JWT Configuration
echo JWT_SECRET=portal-v2-development-jwt-secret-%random%
echo JWT_EXPIRES_IN=24h
echo JWT_EXPIRATION=15m
echo REFRESH_TOKEN_SECRET=portal-v2-refresh-secret-%random%
echo REFRESH_TOKEN_EXPIRATION=7d
echo.
echo # Security Configuration
echo BCRYPT_ROUNDS=10
echo.
echo # Application Configuration
echo NODE_ENV=development
echo PORT=%BACKEND_PORT%
echo.
echo # CORS Configuration
echo NEXT_PUBLIC_API_URL=http://localhost:%BACKEND_PORT%
echo.
echo # Monitoring
echo LOG_LEVEL=info
echo ENABLE_REQUEST_LOGGING=true
echo ENABLE_HEALTH_CHECKS=true
echo ENABLE_SWAGGER=true
) > .env

echo ✅ .env file created

REM Install dependencies
echo ℹ️  Installing dependencies...
npm install
if errorlevel 1 (
    echo ❌ Failed to install dependencies
    pause
    exit /b 1
)

echo ✅ Dependencies installed

REM Build application
echo ℹ️  Building application...
npm run build
if errorlevel 1 (
    echo ❌ Build failed
    pause
    exit /b 1
)

echo ✅ Application built successfully

REM Start the backend service
echo ℹ️  Starting backend service...
echo ℹ️  Backend will start on http://localhost:%BACKEND_PORT%

start "Portal v2 Backend" cmd /k "npm run start:prod"

REM Wait a bit for the service to start
timeout /t 10 /nobreak >nul

REM Test the health endpoint
echo ℹ️  Testing health endpoint...
timeout /t 5 /nobreak >nul

curl -f -s "http://localhost:%BACKEND_PORT%/api/health" >nul 2>&1
if errorlevel 1 (
    echo ⚠️  Health endpoint not responding yet, this may be normal for initial startup
) else (
    echo ✅ Health endpoint responding
)

echo.
echo 🎯 DEPLOYMENT STATUS SUMMARY
echo ============================
echo ✅ Portal v2.0 Backend deployment process completed
echo.
echo 📋 Service Information:
echo   🌐 Backend URL: http://localhost:%BACKEND_PORT%
echo   📚 API Docs: http://localhost:%BACKEND_PORT%/api/docs
echo   🏥 Health Check: http://localhost:%BACKEND_PORT%/api/health
echo   📊 Metrics: http://localhost:%BACKEND_PORT%/api/metrics
echo   🎨 Frontend: http://localhost:%FRONTEND_PORT%
echo.
echo 📝 Next Steps:
echo   1. Wait 30-60 seconds for full startup
echo   2. Open http://localhost:%BACKEND_PORT%/api/health in browser
echo   3. Check API documentation at http://localhost:%BACKEND_PORT%/api/docs
echo   4. Test frontend-backend integration
echo.
echo ⚠️  If the backend doesn't start:
echo   1. Check the console window that opened
echo   2. Verify PostgreSQL is running on port 5433
echo   3. Check the logs for error messages
echo.

pause
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { apiClient, AiRequest, QueueResponse } from '@/services/api-client';

export default function AIQueuePage() {
  const router = useRouter();
  const [requests, setRequests] = useState<AiRequest[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedRequest, setSelectedRequest] = useState<AiRequest | null>(null);
  const [actionLoading, setActionLoading] = useState<{ [key: number]: string }>({});
  const [toast, setToast] = useState<{ message: string; type: 'success' | 'error' } | null>(null);

  useEffect(() => {
    // Check authentication
    const token = localStorage.getItem('adminToken');
    if (!token) {
      router.push('/');
      return;
    }

    fetchQueue();
    const interval = setInterval(fetchQueue, 30000); // Auto-refresh every 30 seconds
    return () => clearInterval(interval);
  }, [router]);

  const fetchQueue = async () => {
    try {
      const data: QueueResponse = await apiClient.getQueue();
      setRequests(data.requests);
      console.log('üìä AI Queue loaded:', data);
    } catch (error) {
      console.error('‚ùå Failed to fetch queue:', error);
      showToast('Failed to load AI queue', 'error');
    } finally {
      setLoading(false);
    }
  };

  const showToast = (message: string, type: 'success' | 'error') => {
    setToast({ message, type });
    setTimeout(() => setToast(null), 5000);
  };

  const handleAssign = async (requestId: number) => {
    setActionLoading({ ...actionLoading, [requestId]: 'assigning' });
    try {
      await apiClient.assignRequest(requestId);
      await fetchQueue();
      showToast('Request assigned successfully', 'success');
    } catch (error) {
      console.error('Error assigning request:', error);
      showToast('Failed to assign request', 'error');
    } finally {
      const newLoading = { ...actionLoading };
      delete newLoading[requestId];
      setActionLoading(newLoading);
    }
  };

  const handleStart = async (requestId: number) => {
    setActionLoading({ ...actionLoading, [requestId]: 'starting' });
    try {
      await apiClient.startProcessing(requestId);
      await fetchQueue();
      showToast('Processing started', 'success');
    } catch (error) {
      console.error('Error starting processing:', error);
      showToast('Failed to start processing', 'error');
    } finally {
      const newLoading = { ...actionLoading };
      delete newLoading[requestId];
      setActionLoading(newLoading);
    }
  };

  const handleComplete = (request: AiRequest) => {
    setSelectedRequest(request);
  };

  const handleReject = async (requestId: number) => {
    const reason = prompt('Please provide a reason for rejection:');
    if (!reason) return;

    setActionLoading({ ...actionLoading, [requestId]: 'rejecting' });
    try {
      await apiClient.rejectRequest(requestId, reason);
      await fetchQueue();
      showToast('Request rejected', 'success');
    } catch (error) {
      console.error('Error rejecting request:', error);
      showToast('Failed to reject request', 'error');
    } finally {
      const newLoading = { ...actionLoading };
      delete newLoading[requestId];
      setActionLoading(newLoading);
    }
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      pending: { 
        gradient: 'from-amber-100 to-orange-100', 
        text: 'text-amber-800', 
        dot: 'bg-amber-500', 
        label: 'Pending',
        icon: '‚è≥'
      },
      assigned: { 
        gradient: 'from-blue-100 to-indigo-100', 
        text: 'text-blue-800', 
        dot: 'bg-blue-500', 
        label: 'Assigned',
        icon: 'üë§'
      },
      processing: { 
        gradient: 'from-purple-100 to-pink-100', 
        text: 'text-purple-800', 
        dot: 'bg-purple-500', 
        label: 'Processing',
        icon: '‚öôÔ∏è'
      },
      completed: { 
        gradient: 'from-emerald-100 to-green-100', 
        text: 'text-emerald-800', 
        dot: 'bg-emerald-500', 
        label: 'Completed',
        icon: '‚úÖ'
      },
      rejected: { 
        gradient: 'from-red-100 to-rose-100', 
        text: 'text-red-800', 
        dot: 'bg-red-500', 
        label: 'Rejected',
        icon: '‚ùå'
      },
    };

    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;
    
    return (
      <motion.span 
        whileHover={{ scale: 1.05 }}
        className={`inline-flex items-center px-3 py-2 text-xs font-semibold rounded-xl bg-gradient-to-r ${config.gradient} ${config.text} shadow-sm border border-white/50`}
      >
        <span className="mr-2 text-sm">{config.icon}</span>
        <div className={`w-2 h-2 rounded-full mr-2 ${
          status === 'processing' ? `${config.dot} animate-pulse` : config.dot
        }`}></div>
        {config.label}
      </motion.span>
    );
  };

  const getActionButtons = (request: AiRequest) => {
    const requestId = request.id;
    const currentAction = actionLoading[requestId];
    
    if (currentAction) {
      return (
        <motion.div 
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="flex items-center space-x-3 px-4 py-2 bg-slate-100/70 rounded-xl border border-slate-200/50"
        >
          <div className="animate-spin rounded-full h-4 w-4 border-2 border-slate-300 border-t-indigo-600"></div>
          <span className="text-sm text-slate-700 capitalize font-medium">{currentAction}...</span>
        </motion.div>
      );
    }

    switch (request.status) {
      case 'pending':
        return (
          <div className="flex space-x-2">
            <motion.button
              whileHover={{ scale: 1.02, y: -1 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleAssign(requestId)}
              className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-white bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl group"
            >
              <span className="mr-2 group-hover:scale-110 transition-transform">üë§</span>
              Assign
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02, y: -1 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleReject(requestId)}
              className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-red-700 bg-gradient-to-r from-red-100 to-red-200 hover:from-red-200 hover:to-red-300 rounded-xl transition-all duration-200 border border-red-300 hover:border-red-400 shadow-md hover:shadow-lg group"
            >
              <span className="mr-2 group-hover:scale-110 transition-transform">‚ùå</span>
              Reject
            </motion.button>
          </div>
        );
      
      case 'assigned':
        return (
          <div className="flex space-x-2">
            <motion.button
              whileHover={{ scale: 1.02, y: -1 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleStart(requestId)}
              className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-white bg-gradient-to-r from-purple-600 to-violet-600 hover:from-purple-700 hover:to-violet-700 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl group"
            >
              <span className="mr-2 group-hover:animate-spin">‚öôÔ∏è</span>
              Start
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02, y: -1 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleReject(requestId)}
              className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-red-700 bg-gradient-to-r from-red-100 to-red-200 hover:from-red-200 hover:to-red-300 rounded-xl transition-all duration-200 border border-red-300 hover:border-red-400 shadow-md hover:shadow-lg group"
            >
              <span className="mr-2 group-hover:scale-110 transition-transform">‚ùå</span>
              Reject
            </motion.button>
          </div>
        );
      
      case 'processing':
        return (
          <div className="flex space-x-2">
            <motion.button
              whileHover={{ scale: 1.02, y: -1 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleComplete(request)}
              className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-white bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl group"
            >
              <span className="mr-2 group-hover:scale-125 transition-transform">‚úÖ</span>
              Complete
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.02, y: -1 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => handleReject(requestId)}
              className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-red-700 bg-gradient-to-r from-red-100 to-red-200 hover:from-red-200 hover:to-red-300 rounded-xl transition-all duration-200 border border-red-300 hover:border-red-400 shadow-md hover:shadow-lg group"
            >
              <span className="mr-2 group-hover:scale-110 transition-transform">‚ùå</span>
              Reject
            </motion.button>
          </div>
        );
      
      case 'completed':
        return (
          <motion.button
            whileHover={{ scale: 1.02, y: -1 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => setSelectedRequest(request)}
            className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-indigo-700 bg-gradient-to-r from-indigo-100 to-blue-100 hover:from-indigo-200 hover:to-blue-200 rounded-xl transition-all duration-200 border border-indigo-300 hover:border-indigo-400 shadow-md hover:shadow-lg group"
          >
            <span className="mr-2 group-hover:scale-110 transition-transform">üëÅÔ∏è</span>
            View Result
          </motion.button>
        );
      
      case 'rejected':
        return (
          <motion.button
            whileHover={{ scale: 1.02, y: -1 }}
            whileTap={{ scale: 0.98 }}
            onClick={() => alert(`Rejection reason: ${(request as any).rejectionReason || 'No reason provided'}`)}
            className="inline-flex items-center px-4 py-2.5 text-xs font-semibold text-slate-700 bg-gradient-to-r from-slate-100 to-gray-100 hover:from-slate-200 hover:to-gray-200 rounded-xl transition-all duration-200 border border-slate-300 hover:border-slate-400 shadow-md hover:shadow-lg group"
          >
            <span className="mr-2 group-hover:scale-110 transition-transform">‚ÑπÔ∏è</span>
            View Reason
          </motion.button>
        );
      
      default:
        return null;
    }
  };

  const formatDate = (date: string | Date) => {
    const dateObj = typeof date === 'string' ? new Date(date) : date;
    return dateObj.toLocaleDateString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
        <motion.div 
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="text-center p-8 bg-white/80 backdrop-blur-sm rounded-3xl border border-white/20 shadow-2xl"
        >
          <div className="w-16 h-16 border-4 border-slate-200 border-t-indigo-600 rounded-full animate-spin mx-auto mb-6" />
          <h2 className="text-xl font-semibold text-slate-800 mb-2">Loading AI Queue</h2>
          <p className="text-slate-600 text-sm">Processing requests...</p>
        </motion.div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      {/* Header */}
      <motion.header 
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        className="bg-white/90 backdrop-blur-xl shadow-xl border-b border-white/20 sticky top-0 z-50"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-6">
              <motion.div whileHover={{ x: -4 }} whileTap={{ scale: 0.95 }}>
                <Link
                  href="/dashboard"
                  className="text-slate-600 hover:text-slate-900 transition-all duration-200 flex items-center space-x-2 px-3 py-2 rounded-xl hover:bg-slate-100/70 group"
                >
                  <span className="group-hover:-translate-x-1 transition-transform">‚Üê</span>
                  <span className="font-medium">Back to Dashboard</span>
                </Link>
              </motion.div>
              <div className="flex items-center space-x-4">
                <motion.div 
                  whileHover={{ scale: 1.05, rotate: 5 }}
                  className="w-12 h-12 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg"
                >
                  <span className="text-white text-xl">ü§ñ</span>
                </motion.div>
                <div>
                  <h1 className="text-2xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">AI Queue Management</h1>
                  <p className="text-sm text-slate-600">Process customer AI generation requests</p>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <motion.div 
                whileHover={{ scale: 1.02 }}
                className="bg-white/70 backdrop-blur-sm px-4 py-3 rounded-2xl border border-white/30 shadow-sm"
              >
                <p className="text-slate-600 text-xs font-medium mb-1">Total Requests</p>
                <p className="text-slate-900 text-xl font-bold">{requests.length}</p>
              </motion.div>
            </div>
          </div>
        </div>
      </motion.header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Queue Table */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="bg-white/80 backdrop-blur-sm rounded-3xl shadow-2xl overflow-hidden border border-white/30"
        >
          <div className="overflow-x-auto">
            <table className="min-w-full">
              <thead className="bg-gradient-to-r from-slate-50 to-blue-50 border-b border-slate-200/50">
                <tr>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Request</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Customer</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Site</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Content Type</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Business</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Created</th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-700 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white/50 backdrop-blur-sm">
                <AnimatePresence>
                  {requests.length === 0 ? (
                    <motion.tr
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                    >
                      <td colSpan={8} className="px-6 py-16 text-center">
                        <motion.div 
                          initial={{ scale: 0.8, opacity: 0 }}
                          animate={{ scale: 1, opacity: 1 }}
                          transition={{ delay: 0.2 }}
                          className="flex flex-col items-center justify-center"
                        >
                          <div className="w-16 h-16 bg-gradient-to-r from-slate-200 to-slate-300 rounded-3xl flex items-center justify-center mb-6">
                            <svg className="w-8 h-8 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                          </div>
                          <h3 className="text-xl font-semibold text-slate-700 mb-2">No AI requests found</h3>
                          <p className="text-slate-500 text-sm">Queue is empty - new requests will appear here</p>
                        </motion.div>
                      </td>
                    </motion.tr>
                  ) : (
                    requests.map((request, index) => (
                      <motion.tr 
                        key={request.id}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: index * 0.05 }}
                        whileHover={{ backgroundColor: "rgba(99, 102, 241, 0.02)" }}
                        className="border-b border-slate-100/50 hover:bg-gradient-to-r hover:from-indigo-50/30 hover:to-purple-50/30 transition-all duration-300 group"
                      >
                        <td className="px-6 py-5 whitespace-nowrap">
                          <div className="flex items-center space-x-3">
                            <motion.div 
                              whileHover={{ scale: 1.1, rotate: 5 }}
                              className="w-10 h-10 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl flex items-center justify-center shadow-md group-hover:shadow-lg transition-all duration-300"
                            >
                              <span className="text-white font-bold text-sm">#{request.id}</span>
                            </motion.div>
                            <div>
                              <p className="text-sm font-semibold text-slate-900 group-hover:text-indigo-700 transition-colors">Request #{request.id}</p>
                              <p className="text-xs text-slate-500">AI Generation Task</p>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          <div>
                            <p className="text-sm font-medium text-slate-900">Customer {request.customerId}</p>
                            <p className="text-xs text-slate-500">ID: {request.customerId}</p>
                          </div>
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          <div>
                            <p className="text-sm font-medium text-slate-900">{request.siteId}</p>
                            <p className="text-xs text-slate-500">Site identifier</p>
                          </div>
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          <span className="inline-flex items-center px-3 py-1.5 rounded-xl text-xs font-semibold bg-gradient-to-r from-blue-100 to-cyan-100 text-blue-800 shadow-sm">
                            <span className="w-2 h-2 bg-blue-500 rounded-full mr-2 animate-pulse"></span>
                            {request.requestType}
                          </span>
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          <span className="inline-flex items-center px-3 py-1.5 rounded-xl text-xs font-semibold bg-gradient-to-r from-slate-100 to-gray-100 text-slate-700 shadow-sm">
                            {request.businessType}
                          </span>
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          {getStatusBadge(request.status)}
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          <div>
                            <p className="text-sm font-medium text-slate-900">{formatDate(request.createdAt)}</p>
                            <p className="text-xs text-slate-500">Created</p>
                          </div>
                        </td>
                        <td className="px-6 py-5 whitespace-nowrap">
                          {getActionButtons(request)}
                        </td>
                      </motion.tr>
                    ))
                  )
                }
                </AnimatePresence>
              </tbody>
            </table>
          </div>
        </div>
      </main>

      {/* Toast Notifications */}
      <AnimatePresence>
        {toast && (
          <motion.div 
            initial={{ opacity: 0, x: 100, scale: 0.8 }}
            animate={{ opacity: 1, x: 0, scale: 1 }}
            exit={{ opacity: 0, x: 100, scale: 0.8 }}
            className={`fixed top-6 right-6 p-5 rounded-2xl shadow-2xl backdrop-blur-sm border-2 z-50 max-w-sm ${
              toast.type === 'success' 
                ? 'bg-gradient-to-r from-emerald-500/90 to-green-600/90 border-emerald-300/50' 
                : 'bg-gradient-to-r from-red-500/90 to-rose-600/90 border-red-300/50'
            } text-white`}
          >
            <div className="flex items-center space-x-3">
              <motion.div 
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                transition={{ delay: 0.1, type: "spring", stiffness: 200 }}
                className="flex-shrink-0"
              >
                {toast.type === 'success' ? (
                  <span className="text-2xl">‚úÖ</span>
                ) : (
                  <span className="text-2xl">‚ö†Ô∏è</span>
                )}
              </motion.div>
              <div className="flex-1">
                <p className="font-semibold text-sm leading-relaxed">{toast.message}</p>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Processing Modal */}
      {selectedRequest && (
        <ProcessingModal 
          request={selectedRequest}
          onClose={() => setSelectedRequest(null)}
          onComplete={fetchQueue}
          showToast={showToast}
        />
      )}
    </div>
  );
}

interface ProcessingModalProps {
  request: AiRequest;
  onClose: () => void;
  onComplete: () => void;
  showToast: (message: string, type: 'success' | 'error') => void;
}

function ProcessingModal({ request, onClose, onComplete, showToast }: ProcessingModalProps) {
  const [generatedContent, setGeneratedContent] = useState('');
  const [loading, setLoading] = useState(false);

  const generatePrompt = () => {
    const { requestData, requestType, businessType } = request;
    const siteName = requestData?.siteName || request.siteId;
    
    switch (requestType) {
      case 'services':
        return `G√©n√®re 5 services professionnels pour un site de ${businessType}.
Site: ${siteName}
Business: ${businessType}
Terminologie: services

Format JSON:
{
  "services": [
    {
      "title": "Nom du service",
      "description": "Description d√©taill√©e",
      "features": ["Caract√©ristique 1", "Caract√©ristique 2", "Caract√©ristique 3"]
    }
  ]
}`;
      
      case 'hero':
        return `G√©n√®re le contenu hero pour un site de ${businessType}.
Site: ${siteName}
Business: ${businessType}

Format JSON:
{
  "title": "Titre accrocheur (max 60 caract√®res)",
  "subtitle": "Sous-titre descriptif",
  "description": "Description engageante (2-3 phrases)"
}`;
      
      case 'about':
        return `G√©n√®re le contenu "√Ä propos" pour ${siteName}.
Business: ${businessType}

Format JSON:
{
  "title": "√Ä propos de ${siteName}",
  "subtitle": "Sous-titre engageant",
  "description": "Pr√©sentation de l'entreprise (3-4 phrases)",
  "values": [
    {"title": "Valeur 1", "description": "Description valeur 1"},
    {"title": "Valeur 2", "description": "Description valeur 2"},
    {"title": "Valeur 3", "description": "Description valeur 3"}
  ]
}`;
      
      default:
        return `G√©n√®re du contenu ${requestType} pour un site de ${businessType}.
Site: ${siteName}
Business: ${businessType}
Format: JSON structur√© selon les sp√©cifications.`;
    }
  };

  const handleCopyPrompt = () => {
    navigator.clipboard.writeText(generatePrompt());
    showToast('Prompt copied to clipboard', 'success');
  };

  const handleComplete = async () => {
    if (!generatedContent.trim()) {
      alert('Veuillez coller le contenu g√©n√©r√©');
      return;
    }

    setLoading(true);
    try {
      let content;
      try {
        content = JSON.parse(generatedContent);
      } catch (error) {
        throw new Error('Le contenu doit √™tre au format JSON valide');
      }

      await apiClient.completeRequest(request.id, content, 'Processed via admin interface', request.estimatedCost);
      onComplete();
      onClose();
      showToast('Request completed successfully', 'success');
    } catch (error: any) {
      console.error('Error completing request:', error);
      showToast(error.message || 'Failed to complete request', 'error');
    } finally {
      setLoading(false);
    }
  };


  return (
    <AnimatePresence>
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4 z-50"
        onClick={onClose}
      >
        <motion.div 
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          onClick={(e) => e.stopPropagation()}
          className="bg-gradient-to-br from-slate-800 to-slate-900 rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto border border-slate-600/50 shadow-2xl"
        >
          <div className="p-8">
            <div className="flex justify-between items-center mb-6">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-gradient-to-r from-indigo-600 to-purple-600 rounded-2xl flex items-center justify-center">
                  <span className="text-white text-xl">ü§ñ</span>
                </div>
                <div>
                  <h2 className="text-2xl font-bold text-white">Process AI Request #{request.id}</h2>
                  <p className="text-slate-400 text-sm">Content Generation Interface</p>
                </div>
              </div>
              <motion.button
                whileHover={{ scale: 1.1, rotate: 90 }}
                whileTap={{ scale: 0.9 }}
                onClick={onClose}
                className="w-10 h-10 bg-slate-700 hover:bg-slate-600 rounded-xl flex items-center justify-center text-slate-400 hover:text-white transition-all duration-200"
              >
                ‚úï
              </motion.button>
            </div>
            
            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.1 }}
              className="bg-gradient-to-r from-slate-700 to-slate-600 p-6 rounded-2xl mb-6 border border-slate-500/30"
            >
              <div className="grid grid-cols-2 gap-6 text-sm">
                <div className="space-y-1">
                  <p className="text-slate-400 font-medium">Site Name</p>
                  <p className="text-white font-semibold">{request.requestData?.siteName || request.siteId}</p>
                </div>
                <div className="space-y-1">
                  <p className="text-slate-400 font-medium">Content Type</p>
                  <p className="text-white font-semibold">{request.requestType}</p>
                </div>
                <div className="space-y-1">
                  <p className="text-slate-400 font-medium">Business Type</p>
                  <p className="text-white font-semibold">{request.businessType}</p>
                </div>
                <div className="space-y-1">
                  <p className="text-slate-400 font-medium">Customer ID</p>
                  <p className="text-white font-semibold">{request.customerId}</p>
                </div>
              </div>
            </motion.div>

            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2 }}
              className="mb-6"
            >
              <label className="block text-lg font-semibold text-slate-200 mb-3">Suggested Prompt:</label>
              <div className="bg-gradient-to-r from-slate-700 to-slate-600 p-4 rounded-2xl text-sm text-slate-200 relative border border-slate-500/30">
                <pre className="whitespace-pre-wrap font-mono leading-relaxed">{generatePrompt()}</pre>
                <motion.button 
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={handleCopyPrompt}
                  className="absolute top-3 right-3 px-3 py-2 text-xs bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white rounded-xl transition-all duration-200 shadow-lg hover:shadow-xl flex items-center space-x-2"
                >
                  <span>üìã</span>
                  <span>Copy</span>
                </motion.button>
              </div>
            </motion.div>

            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="mb-8"
            >
              <label className="block text-lg font-semibold text-slate-200 mb-3">AI Generated Result (JSON):</label>
              <textarea
                value={generatedContent}
                onChange={(e) => setGeneratedContent(e.target.value)}
                className="w-full h-64 p-4 bg-gradient-to-r from-slate-700 to-slate-600 border border-slate-500/30 rounded-2xl text-white placeholder-slate-400 focus:border-indigo-500 focus:outline-none transition-all duration-200 font-mono text-sm leading-relaxed resize-none"
                placeholder="Paste the AI-generated content here..."
              />
            </motion.div>

            <motion.div 
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
              className="flex justify-end space-x-4 pt-4 border-t border-slate-600/50"
            >
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={onClose}
                className="px-6 py-3 text-slate-300 bg-gradient-to-r from-slate-700 to-slate-600 rounded-xl hover:from-slate-600 hover:to-slate-500 transition-all duration-200 font-semibold border border-slate-500/30"
              >
                Cancel
              </motion.button>
              <motion.button
                whileHover={{ scale: loading ? 1 : 1.02 }}
                whileTap={{ scale: loading ? 1 : 0.98 }}
                onClick={handleComplete}
                disabled={loading}
                className="px-8 py-3 text-white bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 rounded-xl disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 font-semibold shadow-lg hover:shadow-xl flex items-center space-x-2"
              >
                {loading && (
                  <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
                )}
                <span>{loading ? 'Processing...' : '‚úÖ Complete Request'}</span>
              </motion.button>
            </motion.div>
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );
}
